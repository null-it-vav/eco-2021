// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YooMoneyUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreGraphics
import Dispatch
import Foundation
import FunctionalSwift
import UIKit.NSLayoutConstraint
import Foundation.NSObject
import QuartzCore
import Swift
import UIKit.UICollectionViewCell
import UIKit.UIColor
import UIKit.UIContextualAction
import UIKit.UIImage
import UIKit.UIImageView
import UIKit
import UIKit.UILabel
import UIKit.UIPresentationController
import UIKit.UIResponder
import UIKit.UITableView
import UIKit.UITableViewCell
import UIKit.UITableViewHeaderFooterView
import UIKit.UIView
import UIKit.UIViewController
import WebKit.WKNavigationDelegate
import WebKit.WKUIDelegate
import WebKit.WKWebView
import WebKit
@_exported import YooMoneyUI
import _Concurrency
import _StringProcessing
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_ cellClass: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_ headerFooterViewClass: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableHeaderFooterView<T>(withType type: T.Type) -> T where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(withType type: T.Type, for indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(withType type: T.Type) -> T where T : UIKit.UITableViewCell
}
public protocol ActionItemViewInput : AnyObject {
  var icon: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  var badge: UIKit.UIImage? { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public struct Style : Swift.Hashable {
  public init<T>(name: Swift.String, process: @escaping (T) -> Swift.Void) where T : YooMoneyUI.Stylable
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: YooMoneyUI.Style, b: YooMoneyUI.Style) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public func + (lhs: YooMoneyUI.Style, rhs: YooMoneyUI.Style) -> YooMoneyUI.Style
public protocol PlaceholderPresenting {
  func showPlaceholder()
  func hidePlaceholder()
}
extension YooMoneyUI.PlaceholderPresenting where Self : UIKit.UIViewController, Self : YooMoneyUI.PlaceholderProvider {
  public func showPlaceholder()
  public func hidePlaceholder()
  public func showPlaceholder(on view: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.LargeIconItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.ButtonItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let enabled: YooMoneyUI.Style
  }
}
public protocol LargeTagItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var tagTitle: Swift.String { get set }
}
public protocol LargeTagItemViewOutput : AnyObject {
  func didPressTag(in itemView: YooMoneyUI.LargeTagItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TitleItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.TitleItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ButtonItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.ButtonItemTableViewCell : YooMoneyUI.ButtonItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressButton(in itemView: YooMoneyUI.ButtonItemViewInput)
}
extension YooMoneyUI.TagIconCollectionViewCell {
  public enum Styles {
    public static let tint: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let inverseTint: YooMoneyUI.Style
    public static let stroke: YooMoneyUI.Style
    public enum Size {
      public static let `default`: YooMoneyUI.Style
      public static let compact: YooMoneyUI.Style
    }
  }
}
public protocol Identifier {
  static var identifier: Swift.String { get }
}
extension YooMoneyUI.Identifier {
  @nonobjc public static var identifier: Swift.String {
    get
  }
}
extension YooMoneyUI.IconLargeValueItemTableViewCell {
  public enum Styles {
    public static let alertValue: YooMoneyUI.Style
    public static let whiteBackground: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let heavyTitle: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum SubtitleTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Title {
      public static let dark: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.GradientView {
  public enum Styles {
    public static let footer: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeTagItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.LargeTagItemTableViewCell : YooMoneyUI.LargeTagItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressTag(in itemView: YooMoneyUI.LargeTagItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ScrollViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var scrollView: UIKit.UIScrollView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var headerView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var headerInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) public var footerView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFooterGradientHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var footerInsets: UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.ScrollViewController : YooMoneyUI.KeyboardObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func keyboardWillShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func keyboardDidShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func keyboardWillHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func keyboardDidHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func keyboardDidUpdateFrame(_ keyboardFrame: CoreFoundation.CGRect)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ButtonItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.ButtonItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ButtonItemView : YooMoneyUI.ButtonItemViewInput {
}
extension YooMoneyUI.ButtonItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UITableViewCell : YooMoneyUI.Identifier {
}
public struct ActionSheetSection {
  public let items: [YooMoneyUI.ActionSheetItem]
  public let title: Swift.String?
  public init(items: [YooMoneyUI.ActionSheetItem], title: Swift.String? = nil)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var tintCardColor: UIKit.UIColor! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var tintBackgroundColor: UIKit.UIColor! {
    get
    set
  }
}
extension YooMoneyUI.IconButtonItemTableViewCell {
  public enum Styles {
    public static let iconLink: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LinksTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func addGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @available(iOS 7.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeProgressTagItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.ProgressTagItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeProgressTagItemView : YooMoneyUI.LargeProgressTagItemViewInput {
}
extension YooMoneyUI.LargeProgressTagItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.LargeIconTagItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Icon {
      public static let tint: YooMoneyUI.Style
      public static let backgroundTint: YooMoneyUI.Style
      public static let inverseBackgroundTint: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AccountBalanceView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.AccountBalanceViewOutput?
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var amount: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var button: UIKit.UIButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.AccountBalanceView : YooMoneyUI.AccountBalanceViewInput {
  @_Concurrency.MainActor(unsafe) final public func setTitleAlpha(_ alpha: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) final public func setAmountAlpha(_ alpha: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TourItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var output: YooMoneyUI.TourItemViewOutput?
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var submitTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var list: [(icon: UIKit.UIImage, title: Swift.String, subtitle: Swift.String?)] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var details: (icon: UIKit.UIImage, title: Swift.String)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TourItemView : YooMoneyUI.TourItemViewInput {
}
extension YooMoneyUI.IconSectionHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SectionTableHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var headerView: YooMoneyUI.SectionHeaderView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var titlePressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension YooMoneyUI.SectionTableHeaderView : YooMoneyUI.SectionHeaderViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressTitle(in headerView: YooMoneyUI.SectionHeaderViewInput)
}
extension YooMoneyUI.LargeIconImageItemView {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public enum IconOriginal {
      public static let normal: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.LargeImageGridViewCollectionViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let link: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public enum Bookmark {
      public static let active: YooMoneyUI.Style
      public static let inactive: YooMoneyUI.Style
      public static let hidden: YooMoneyUI.Style
    }
  }
}
public protocol TransitionHandler : AnyObject {
  func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
  func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconItemShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconItemShimmerView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIViewController : YooMoneyUI.TransitionHandler {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DimmingPresentationController : UIKit.UIPresentationController {
  @_Concurrency.MainActor(unsafe) public var preferredBackgroundColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func presentationTransitionWillBegin()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func dismissalTransitionWillBegin()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func presentationTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func dismissalTransitionDidEnd(_ completed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
  @objc deinit
}
extension YooMoneyUI.ChatInformer {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
    public static let withOffsets: YooMoneyUI.Style
  }
}
public protocol PlaceholderProvider {
  var placeholderView: YooMoneyUI.PlaceholderView { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeItemShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeItemShimmerView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol Stylable : ObjectiveC.NSObjectProtocol {
  func setStyles(_ styles: YooMoneyUI.Style...)
  func setStyles(_ styles: [YooMoneyUI.Style])
  func removeStyle(_ style: YooMoneyUI.Style)
  func appendStyle(_ style: YooMoneyUI.Style)
  func applyStyles()
}
extension YooMoneyUI.Stylable {
  public func setStyles(_ styles: YooMoneyUI.Style...)
  public func setStyles(_ styles: [YooMoneyUI.Style])
  public func removeStyle(_ style: YooMoneyUI.Style)
  public func appendStyle(_ style: YooMoneyUI.Style)
  public func applyStyles()
}
extension UIKit.UIViewController : YooMoneyUI.Stylable {
}
extension UIKit.UIView : YooMoneyUI.Stylable {
}
extension UIKit.UINavigationItem : YooMoneyUI.Stylable {
}
extension UIKit.UIBarItem : YooMoneyUI.Stylable {
}
extension UIKit.UITabBarItem {
  public enum Styles {
    public static let main: YooMoneyUI.Style
    public static let shopping: YooMoneyUI.Style
    public static let catalog: YooMoneyUI.Style
    public static let cards: YooMoneyUI.Style
    public static let selfEmployed: YooMoneyUI.Style
  }
}
extension YooMoneyUI.SectionHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
    public static let formLink: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconDetailsItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconDetailsItemView : YooMoneyUI.IconDetailsItemViewInput {
}
extension YooMoneyUI.IconDetailsItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.BadgeTemplate {
  public enum Styles {
    public enum Masked {
      public static let small: YooMoneyUI.Style
      public static let medium: YooMoneyUI.Style
      public static let large: YooMoneyUI.Style
    }
    public enum NoneMasked {
      public static let small: YooMoneyUI.Style
      public static let medium: YooMoneyUI.Style
      public static let large: YooMoneyUI.Style
      public static let selfSizing: YooMoneyUI.Style
    }
  }
}
@objc public protocol KeyboardObserver {
  @objc func keyboardWillShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @objc func keyboardDidShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @objc func keyboardWillHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @objc func keyboardDidHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @objc func keyboardDidUpdateFrame(_ keyboardFrame: CoreFoundation.CGRect)
}
@objc @_inheritsConvenienceInitializers final public class KeyboardObservable : ObjectiveC.NSObject {
  public static let shared: YooMoneyUI.KeyboardObservable
  final public func addKeyboardObserver(_ observer: YooMoneyUI.KeyboardObserver)
  final public func removeKeyboardObserver(_ observer: YooMoneyUI.KeyboardObserver)
  final public func isSubscribed(_ observer: YooMoneyUI.KeyboardObserver) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension YooMoneyUI.KeyboardObservable {
  @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DetailsItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeItemShimmerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TitleItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.TitleItemView : YooMoneyUI.TitleItemViewInput {
}
extension YooMoneyUI.TitleItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.ProgressValueItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let compact: YooMoneyUI.Style
    public static let accent: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SmallFullImageGridViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var color: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.TourItemView {
  public enum Styles {
    public static let inverse: YooMoneyUI.Style
    public static let dynamicImage: YooMoneyUI.Style
    public static let contentCenter: YooMoneyUI.Style
    public static let contentTop: YooMoneyUI.Style
    public static let textCenter: YooMoneyUI.Style
    public static let textLeft: YooMoneyUI.Style
  }
}
public protocol ActionInformerInput : AnyObject {
  var buttonTitle: Swift.String { get set }
  var message: Swift.String { get set }
}
public protocol ActionInformerOutput : AnyObject {
  func actionInformerDidPress(in sender: YooMoneyUI.ActionInformerInput)
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var isSeparatorHidden: Swift.Bool {
    get
  }
}
public protocol KeyboardResponder : AnyObject {
  var inputAccessoryView: UIKit.UIView? { get set }
  var inputAccessoryViewController: UIKit.UIInputViewController? { get }
  func reloadInputViews()
}
extension UIKit.UITextView : YooMoneyUI.KeyboardResponder {
}
extension UIKit.UITextField : YooMoneyUI.KeyboardResponder {
}
extension UIKit.UISearchBar : YooMoneyUI.KeyboardResponder {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.IconItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.DetailsItemView {
  public enum Styles {
    public static let secondaryTitle: YooMoneyUI.Style
  }
}
extension YooMoneyUI.KeyboardObserver where Self : UIKit.UIViewController {
  public func startKeyboardObserving()
  public func stopKeyboardObserving()
  public func keyboardYOffset(from keyboardFrame: CoreFoundation.CGRect, withSafeArea: Swift.Bool = false) -> CoreFoundation.CGFloat?
  public var isSubscribedToKeyboardNotifications: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class IconView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var imageValue: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomLeftBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var imageView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var shapeView: YooMoneyUI.ShapeView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
}
extension YooMoneyUI.IconView : YooMoneyUI.IconViewInput {
}
public enum CornerRadius {
  public static let primary: CoreFoundation.CGFloat
  public static let secondary: CoreFoundation.CGFloat
}
@objc @_hasMissingDesignatedInitializers public class KeyboardNotificationInfo : ObjectiveC.NSObject {
  final public let beginKeyboardFrame: CoreFoundation.CGRect
  final public let endKeyboardFrame: CoreFoundation.CGRect
  final public let animationCurve: UIKit.UIView.AnimationCurve?
  final public let animationDuration: Foundation.TimeInterval?
  @objc deinit
}
public struct Config {
  public let isUITest: Swift.Bool
  public let shouldHandleAccessibilitySize: Swift.Bool
  public let fontLimits: [YooMoneyUI.Config.FontLimit]
  public init(isUITest: Swift.Bool, shouldHandleAccessibilitySize: Swift.Bool, fontLimits: [YooMoneyUI.Config.FontLimit])
  public static let `default`: YooMoneyUI.Config
}
extension YooMoneyUI.Config {
  public struct FontLimit {
    public let style: UIKit.UIFont.TextStyle
    public let min: UIKit.UIContentSizeCategory?
    public let max: UIKit.UIContentSizeCategory?
    public init(style: UIKit.UIFont.TextStyle, min: UIKit.UIContentSizeCategory? = nil, max: UIKit.UIContentSizeCategory? = nil)
  }
}
extension YooMoneyUI.LargeItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let withSingleDistance: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconValueItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
public protocol PasscodeInteractorInput {
  var passcodeLength: Swift.Int { get }
  var hasEnterAttempts: Swift.Bool { get }
  func addPasscodeFailAttempt()
  func processScreenAppearance()
  func validate(passcode: Swift.String, completionHandler: @escaping (YooMoneyUI.ValidationResult) -> Swift.Void)
  func process(result: YooMoneyUI.PasscodeEnterResult, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
}
public enum ValidationResult {
  case fail(Swift.Error?)
  case success
}
public enum LocalAuthBiometryType {
  case touchId
  case faceId
  case none
  public static func == (a: YooMoneyUI.LocalAuthBiometryType, b: YooMoneyUI.LocalAuthBiometryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BiometryAuthAttemptResult {
  case correct
  case incorrect
  case cancel
  case fail
  public static func == (a: YooMoneyUI.BiometryAuthAttemptResult, b: YooMoneyUI.BiometryAuthAttemptResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LocalAuthInteractorInput {
  var biometryAuthSupportedByDevice: Swift.Bool { get }
  var canUseBiometry: Swift.Bool { get }
  var isBiometryLocked: Swift.Bool { get }
  var isBiometryAllowed: Swift.Bool { get }
  var biometryType: YooMoneyUI.LocalAuthBiometryType { get }
  func setBiometryAuthTitle(_ title: Swift.String?)
  func setBiometryAuthDescription(_ description: Swift.String)
  func resetBiometryAuthContext()
  func performBiometryAuth()
  func updateEvaluatedPolicyDomainState()
  func validateBiometry()
  func invalidateBiometryContext()
}
public protocol LocalAuthInteractorOutput : AnyObject {
  func didPerformBiometryAuthAttempt(result: YooMoneyUI.BiometryAuthAttemptResult)
  func didValidateBiometry(biometryParametersValid: Swift.Bool)
}
public protocol KeyboardPinning {
  var pinnedViewBottomConstraint: UIKit.NSLayoutConstraint { get }
  func updatePinnedViewLayout(with keyboardFrame: CoreFoundation.CGRect)
}
extension YooMoneyUI.KeyboardPinning where Self : UIKit.UIViewController, Self : YooMoneyUI.KeyboardObserver {
  public func updatePinnedViewLayout(with keyboardFrame: CoreFoundation.CGRect)
}
extension YooMoneyUI.LargeBadgeItemTableViewCell {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disable: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IconInformerShimmerView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LinkSectionTableHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var linkTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var linkAccessibilityIdentifier: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var linkPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension YooMoneyUI.LinkSectionTableHeaderView : YooMoneyUI.LinkSectionHeaderViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressLink(in headerView: YooMoneyUI.LinkSectionHeaderView)
}
extension UIKit.UIImage {
  public static func image(color: UIKit.UIColor) -> UIKit.UIImage
  public func scaled(to size: CoreFoundation.CGSize) -> UIKit.UIImage
  public static func barcode(message: Swift.String, quietSpace: CoreFoundation.CGFloat = 7) -> UIKit.UIImage?
  public func scaled(to size: CoreFoundation.CGSize, interpolationQuality: CoreGraphics.CGInterpolationQuality = .default) -> UIKit.UIImage
  public func rounded(cornerRadius: CoreFoundation.CGFloat) -> UIKit.UIImage
  public func bordered(color: CoreGraphics.CGColor, cornerRadius: CoreFoundation.CGFloat) -> UIKit.UIImage
}
extension UIKit.UIImage {
  public func colorizedImage(color: UIKit.UIColor) -> UIKit.UIImage
}
public protocol ActionSheetTemplateDelegate : AnyObject {
  func actionSheetTemplateDidFinish(_ template: YooMoneyUI.ActionSheetTemplate)
}
@objc @_Concurrency.MainActor(unsafe) public class ActionSheetTemplate : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(content: UIKit.UIViewController, flexibleHeight: Swift.Bool = false)
  @available(*, unavailable, message: "Use init(content:) instead")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) weak public var delegate: YooMoneyUI.ActionSheetTemplateDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension YooMoneyUI.ActionSheetTemplate : YooMoneyUI.KeyboardObserver {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func keyboardWillShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func keyboardWillHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func keyboardDidShow(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func keyboardDidHide(with keyboardInfo: YooMoneyUI.KeyboardNotificationInfo)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func keyboardDidUpdateFrame(_ keyboardFrame: CoreFoundation.CGRect)
}
extension YooMoneyUI.ActionSheetTemplate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension UIKit.UIRectCorner : Swift.Hashable {
}
public struct KeyboardViewStyle {
  public let separatorLineWidth: CoreFoundation.CGFloat
  public let separatorLineColor: UIKit.UIColor
  public let numberButtonStyle: YooMoneyUI.KeyboardButtonStyle
  public init(separatorLineWidth: CoreFoundation.CGFloat = 0, separatorLineColor: UIKit.UIColor = .clear, numberButtonStyle: YooMoneyUI.KeyboardButtonStyle = KeyboardButtonStyle())
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DimmingAutoLayoutPresentationController : YooMoneyUI.DimmingPresentationController {
  @_Concurrency.MainActor(unsafe) @objc override final public func presentationTransitionWillBegin()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(presentedViewController: UIKit.UIViewController, presenting presentingViewController: UIKit.UIViewController?)
  @objc deinit
}
public protocol StickersPresenting {
  var stickersView: UIKit.UIView { get }
  var stickersLayoutGuide: UIKit.UILayoutGuide { get }
  func setStickers(_ stickers: [(sticker: YooMoneyUI.Sticker, position: YooMoneyUI.StickerPosition)])
}
extension YooMoneyUI.StickersPresenting where Self : UIKit.UIView {
  public var stickersView: UIKit.UIView {
    get
  }
  public var stickersLayoutGuide: UIKit.UILayoutGuide {
    get
  }
  public func setStickers(_ stickers: [(sticker: YooMoneyUI.Sticker, position: YooMoneyUI.StickerPosition)])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconValueItemView : YooMoneyUI.IconValueItemViewInput {
}
extension YooMoneyUI.IconValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public typealias ToolTipView = YooMoneyUI.EasyTipView
public typealias ToolTipViewDelegate = YooMoneyUI.EasyTipViewDelegate
extension YooMoneyUI.EasyTipView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let onboarding: YooMoneyUI.Style
  }
  public enum AccessoryType {
    case disclosureIndicator
    public static func == (a: YooMoneyUI.EasyTipView.AccessoryType, b: YooMoneyUI.EasyTipView.AccessoryType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @available(*, deprecated, message: "Use ToolTipView.Styles instead")
  public enum Style {
    @available(*, deprecated, message: "Use ToolTipView.Styles.default instead")
    case `default`
    @available(*, deprecated, message: "Use ToolTipView.Styles.onboarding instead")
    case onboarding(tintColor: UIKit.UIColor, arrowPosition: YooMoneyUI.ToolTipView.ArrowPosition)
  }
}
public enum ToolTipFactory {
  public static func makeView(style: YooMoneyUI.Style, text: Swift.String, arrowPosition: YooMoneyUI.ToolTipView.ArrowPosition = .any, accessoryType: YooMoneyUI.ToolTipView.AccessoryType? = nil, animationDuration: Foundation.TimeInterval? = nil, delegate: YooMoneyUI.ToolTipViewDelegate? = nil) -> YooMoneyUI.ToolTipView
  @available(*, deprecated, message: "Use makeView(style:text:arrowPosition:accessoryType:delegate:) instead")
  public static func makeView(style: YooMoneyUI.ToolTipView.Style, text: Swift.String, delegate: YooMoneyUI.ToolTipViewDelegate? = nil) -> YooMoneyUI.ToolTipView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AvatarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var userImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var placeholderText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var gradientColors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isFramed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func startAnimation()
  @objc deinit
}
extension YooMoneyUI.AvatarView : YooMoneyUI.AvatarViewInput {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SmallImageGridViewShimmer : YooMoneyUI.CardTemplate {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconSectionTableHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var iconPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension YooMoneyUI.IconSectionTableHeaderView : YooMoneyUI.IconSectionHeaderViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressIcon(in headerView: YooMoneyUI.IconSectionHeaderView)
}
extension YooMoneyUI.LinkSectionTableHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let destructive: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
  }
}
public enum PasscodeEnterResult {
  case success(Swift.String?)
  case fail(YooMoneyUI.PasscodeEnterError)
  case cancel
  public var error: YooMoneyUI.PasscodeEnterError? {
    get
  }
}
public enum PasscodeEnterError : Swift.Error {
  case invalidPasscodeEnter
  case forgotPasscode
  case processValidPasscodeFail(Swift.Error)
}
public struct WebBrowserOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let navigation: YooMoneyUI.WebBrowserOptions
  public static let update: YooMoneyUI.WebBrowserOptions
  public static let close: YooMoneyUI.WebBrowserOptions
  public static let all: YooMoneyUI.WebBrowserOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = YooMoneyUI.WebBrowserOptions
  public typealias Element = YooMoneyUI.WebBrowserOptions
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var iconView: YooMoneyUI.IconView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subtitleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeIconItemView : YooMoneyUI.LargeIconItemViewInput {
}
extension YooMoneyUI.LargeIconItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SectionHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.SectionHeaderViewOutput?
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var titleControl: YooMoneyUI.ActionTemplate {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension YooMoneyUI.SectionHeaderView : YooMoneyUI.SectionHeaderViewInput {
}
extension YooMoneyUI.AvatarView {
  public enum Styles {
    public static let fadeTint: YooMoneyUI.Style
    public static let inverseBackgroundTint: YooMoneyUI.Style
    public static let title2: YooMoneyUI.Style
    public static let title2Light: YooMoneyUI.Style
    public static let title3: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueLargeItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public var styledText: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DetailsItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.DetailsItemView : YooMoneyUI.DetailsItemViewInput {
}
extension YooMoneyUI.DetailsItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.LargeTagItemView {
  public enum Styles {
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
extension UIKit.UIView.AnimationCurve {
  public var animationOptions: UIKit.UIView.AnimationOptions {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ShimmerCollectionViewCell<T> : UIKit.UICollectionViewCell where T : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.TourViewController {
  public enum Styles {
    public static let inverse: YooMoneyUI.Style
    public static let inverseButton: YooMoneyUI.Style
  }
}
extension YooMoneyUI.ImageOptionCollectionViewCell {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let highlighted: YooMoneyUI.Style
    public static let selected: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SmallFullImageGridViewShimmerCollectionViewCell : YooMoneyUI.ShimmerCollectionViewCell<YooMoneyUI.SmallFullImageGridViewShimmer> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum ActionSheetAssembly {
  public static func makeModule(sections: [YooMoneyUI.ActionSheetSection], output: YooMoneyUI.ActionSheetModuleOutput? = nil) -> UIKit.UIViewController
  public static func makeModule(items: [YooMoneyUI.ActionSheetItem], title: Swift.String? = nil, output: YooMoneyUI.ActionSheetModuleOutput? = nil) -> UIKit.UIViewController
}
extension YooMoneyUI.IconLabelValueItemView {
  public enum Styles {
    public static let alertValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
  }
}
extension UIKit.UIBarButtonItem {
  public enum Styles {
    public static let search: YooMoneyUI.Style
    public static let close: YooMoneyUI.Style
    public static let back: YooMoneyUI.Style
    public static let templatedClose: YooMoneyUI.Style
    public static let previous: YooMoneyUI.Style
    public static let next: YooMoneyUI.Style
    public static let logout: YooMoneyUI.Style
    public static let settings: YooMoneyUI.Style
    public static let scan: YooMoneyUI.Style
    public static let question: YooMoneyUI.Style
    public static let questionGray: YooMoneyUI.Style
    public static let info: YooMoneyUI.Style
    public static let more: YooMoneyUI.Style
    public static let qr: YooMoneyUI.Style
    public static let addTintBackground: YooMoneyUI.Style
    public static let activityIndicator: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PlaceholderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ActivityIndicatorPresenting : AnyObject {
  func showActivity()
  func hideActivity()
}
extension UIKit.UINavigationBar {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let accentTintBarBackground: YooMoneyUI.Style
    public static let semiTransparentBar: YooMoneyUI.Style
    public static let transparentBar: YooMoneyUI.Style
    public static let inverseItemsColor: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
  }
}
public protocol TitleItemViewInput : AnyObject {
  var title: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconSectionHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.IconSectionHeaderViewOutput?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconSectionHeaderView : YooMoneyUI.IconSectionHeaderViewInput {
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SmallImageGridViewShimmerCollectionViewCell : YooMoneyUI.ShimmerCollectionViewCell<YooMoneyUI.SmallImageGridViewShimmer> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol ActionSheetItem {
  var cellType: UIKit.UITableViewCell.Type { get }
  var handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)? { get }
  func configureCell(_ cell: UIKit.UITableViewCell)
}
public protocol LargeBadgeItemViewInput : AnyObject {
  var value: Swift.String { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
}
public protocol LargeItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconItemShimmerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.TagSectionHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let formLink: YooMoneyUI.Style
  }
}
extension YooMoneyUI.LargeTagItemTableViewCell {
  public enum Styles {
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
public protocol LargeProgressTagItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var tagTitle: Swift.String { get set }
  var progress: Swift.Float { get set }
}
public protocol ProgressTagItemViewOutput : AnyObject {
  func didPressTag(in itemView: YooMoneyUI.LargeProgressTagItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconTagItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.LargeIconTagItemTableViewCell : YooMoneyUI.LargeIconTagItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func largeIconTagItemViewDidPressTag(_ itemView: YooMoneyUI.LargeIconTagItemViewInput)
}
public struct SimpleActionSheetItem : YooMoneyUI.ActionSheetItem {
  public let title: Swift.String
  public let image: UIKit.UIImage
  public let accessibilityLabel: Swift.String?
  public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
  public init(title: Swift.String, image: UIKit.UIImage, accessibilityLabel: Swift.String? = nil, handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)? = nil)
  public var cellType: UIKit.UITableViewCell.Type {
    get
  }
  public func configureCell(_ cell: UIKit.UITableViewCell)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CollectionReusableViewTemplate : UIKit.UICollectionReusableView {
  @_Concurrency.MainActor(unsafe) open var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.LargeProgressTagItemView {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
extension YooMoneyUI.ValueLargeItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
  }
}
@available(*, deprecated, renamed: "IconLargeValueItemView")
public typealias IconValueLargeItemView = YooMoneyUI.IconLargeValueItemView
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLargeValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subtitleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconLargeValueItemView : YooMoneyUI.IconLargeValueItemViewInput {
}
extension YooMoneyUI.IconLargeValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol LargeIconButtonItemViewInput : AnyObject {
  var image: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var buttonTitle: Swift.String { get set }
}
public protocol LargeIconButtonItemViewOutput : AnyObject {
  func didPressRightButton(in itemView: YooMoneyUI.LargeIconButtonItemViewInput)
}
public protocol TagLargeViewInput : AnyObject {
  var title: Swift.String { get set }
}
extension YooMoneyUI.LargeBadgeItemView {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disable: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconSectionTableHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
  }
}
public enum BarButtonItemFactory {
  public static func makeAdd(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeAddTintBackground(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeMore(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeReload(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeClose(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @available(*, deprecated)
  public static func makePrevious(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @available(*, deprecated)
  public static func makeNext(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeShare(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeSearch(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @available(*, deprecated)
  public static func makeLogout(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeSettings(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeScan(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeActivityIndicator() -> UIKit.UIBarButtonItem
  public static func makeInfo(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @available(*, deprecated)
  public static func makeQuestion(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  @available(*, deprecated)
  public static func makeQuestionGray(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeQr(target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeItem(withTitle title: Swift.String, target: Any?, action: ObjectiveC.Selector?) -> UIKit.UIBarButtonItem
  public static func makeSpacer() -> UIKit.UIBarButtonItem
}
extension YooMoneyUI.Informer {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLabelValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var valueIcon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var details: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.ActivityIndicatorView {
  public enum Styles {
    public static let light: YooMoneyUI.Style
    public static let dark: YooMoneyUI.Style
    public static let heavyLight: YooMoneyUI.Style
    public static let cloudy: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconInformerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TextDialog : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public protocol PasscodeViewInput : YooMoneyUI.NotificationPresenting {
  func show(step: YooMoneyUI.PasscodeScreenStep, animation: YooMoneyUI.PasscodeStepAnimation?)
  func showCorrectPasscodeEnter(completion: (() -> Swift.Void)?)
  func showIncorrectPasscodeEnter(completion: (() -> Swift.Void)?)
  func showPasscodeLengthChange(to length: Swift.Int)
  func showForgotPasswordDialog()
  func showChangeBiometryBlockingDialog()
  func setupNavigationBarToClose()
  func setupNavigationBarToShowBackStep()
  func setupNavigationBarWithoutBackButton()
  var isBiometryButtonHidden: Swift.Bool { get set }
  var isBackspaceButtonHidden: Swift.Bool { get set }
  var isForgotPasscodeButtonHidden: Swift.Bool { get set }
  var isUserInteractionEnabled: Swift.Bool { get set }
  var isActivityIndicatorActive: Swift.Bool { get set }
  func setTouchIdButtonBlocked(_ blocking: Swift.Bool)
  func setBiometryButtonType(_ type: YooMoneyUI.LocalAuthBiometryType)
  var hasPresentedViewController: Swift.Bool { get }
  func setImage(_ image: UIKit.UIImage?)
}
public protocol PasscodeViewOutput : AnyObject {
  var passcodeLength: Swift.Int { get }
  func viewDidLoad()
  func viewDidAppear()
  func viewDidDisappear()
  func viewWillDisappear()
  func didPressCancel()
  func didPressBack()
  func didPressRequestBiometry()
  func didPressForgotPassword()
  func didPressKeyboardNumber(value: Swift.String)
  func didPressBackspace()
  func didPressLogout()
}
public enum PasscodeStepAnimation {
  case back
  case forward
  public static func == (a: YooMoneyUI.PasscodeStepAnimation, b: YooMoneyUI.PasscodeStepAnimation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IconInformerCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var iconColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var informerColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueLargeItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ValueLargeItemView : YooMoneyUI.ValueLargeItemViewInput {
}
extension YooMoneyUI.ValueLargeItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class CirclesPanelView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let circlesCount: Swift.Int
  @_Concurrency.MainActor(unsafe) open var filledCirclesCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public init(circlesCount count: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func reset()
  @_Concurrency.MainActor(unsafe) open func fillNextCircle()
  @_Concurrency.MainActor(unsafe) open func unfillPreviousCircle()
  @objc deinit
}
public protocol IconValueItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  var badge: UIKit.UIImage? { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
}
public protocol PasscodeValidator {
  func isValid(passcode: Swift.String) -> Swift.Bool
}
public class PasscodeEqualityValidator : YooMoneyUI.PasscodeValidator {
  public init()
  open func isValid(passcode: Swift.String) -> Swift.Bool
  @objc deinit
}
extension YooMoneyUI.LargeIconImageItemTableViewCell {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public enum IconOriginal {
      public static let normal: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
public protocol LargeImageGridViewInput : AnyObject {
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  var image: UIKit.UIImage? { get set }
}
public protocol LargeImageGridViewDelegate : AnyObject {
  func bookmarkDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
  func linkDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
  func subvalueDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
}
extension YooMoneyUI.DetailsItemTableViewCell {
  public enum Styles {
    public static let secondaryTitle: YooMoneyUI.Style
  }
}
extension YooMoneyUI.ValueItemTableViewCell {
  public enum Styles {
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let inverseTranslucent: YooMoneyUI.Style
    }
    public static let darkTitle: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let tintValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let amountValue: YooMoneyUI.Style
    public static let `default`: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeImageItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LinkSectionHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var linkTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var linkAccessibilityIdentifier: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.LinkSectionHeaderViewOutput?
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LinkSectionHeaderView : YooMoneyUI.LinkSectionHeaderViewInput {
}
public protocol IconItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TagIconCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @objc deinit
}
extension YooMoneyUI.SwitchItemTableViewCell {
  public enum Styles {
    public static let primary: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TableViewCellTemplate : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) open var templateView: UIKit.UIView? {
    get
    set
  }
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PageViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var pages: [UIKit.UIViewController] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_Concurrency.MainActor(unsafe) final public func setCurrentPage(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) final public func enableTransition()
  @_Concurrency.MainActor(unsafe) final public func disableTransition()
  @_Concurrency.MainActor(unsafe) final public func hidePageControl()
  @_Concurrency.MainActor(unsafe) final public func showPageControl()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.PageViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension YooMoneyUI.PageViewController : UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension YooMoneyUI.IconInformerTableViewCell {
  public enum Styles {
    public static let multiline: YooMoneyUI.Style
    public enum Accent {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum AlertBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum AlertFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Lamp {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Promo {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Advert {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
  }
}
public protocol IconButtonItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var image: UIKit.UIImage? { get set }
  var buttonTitle: Swift.String? { get set }
}
public protocol IconButtonItemViewOutput : AnyObject {
  func didPressButton(in itemView: YooMoneyUI.IconButtonItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ActivityIndicator : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var strokeWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spinnerSize: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var spinnerColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @objc deinit
}
@objc public protocol TextControlDelegate {
  @objc optional func textControlDidBeginEditing(_ textControl: YooMoneyUI.TextControl)
  @objc optional func textControlDidEndEditing(_ textControl: YooMoneyUI.TextControl)
  @objc optional func textControl(_ textControl: YooMoneyUI.TextControl, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc optional func textControlDidChange(_ textControl: YooMoneyUI.TextControl)
  @objc optional func didPressRightButton(on textControl: YooMoneyUI.TextControl)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TextControl : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var textView: UIKit.UITextView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topHintLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomHintLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var placeholderLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) public var lineView: YooMoneyUI.TextControl.LineView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var rightButton: UIKit.UIButton {
    get
  }
  @_Concurrency.MainActor(unsafe) public var leftIcon: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isSecured: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: YooMoneyUI.TextControlDelegate?
  @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var attributedText: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var state: YooMoneyUI.TextControl.State {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var topHint: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftIconMode: YooMoneyUI.TextControl.LeftIconMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var clearMode: YooMoneyUI.TextControl.ClearMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var placeholderMode: YooMoneyUI.TextControl.PlaceholderMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var topHintMode: YooMoneyUI.TextControl.TopHintMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomHintMode: YooMoneyUI.TextControl.BottomHintMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightButtonMode: YooMoneyUI.TextControl.RightButtonMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var lineMode: YooMoneyUI.TextControl.LineMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEmpty: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var padding: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func showRightButton()
  @_Concurrency.MainActor(unsafe) public func hideRightButton()
  @_Concurrency.MainActor(unsafe) public var lineState: YooMoneyUI.TextControl.LineView.State {
    get
    set(state)
  }
  @_Concurrency.MainActor(unsafe) public func fillLine(with color: UIKit.UIColor, height: CoreFoundation.CGFloat, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func hideLine(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func showTopHint(constraints: [UIKit.NSLayoutConstraint], animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func hideTopHint()
  @_Concurrency.MainActor(unsafe) public func showBottomHint(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func hideBottomHint()
  @_Concurrency.MainActor(unsafe) public func set(bottomHintText text: Swift.String?, for state: YooMoneyUI.TextControl.State)
  @_Concurrency.MainActor(unsafe) public func set(bottomHintColor color: UIKit.UIColor, for state: YooMoneyUI.TextControl.State)
  @_Concurrency.MainActor(unsafe) public func set(lineState: YooMoneyUI.TextControl.LineView.State, for state: YooMoneyUI.TextControl.State)
}
extension YooMoneyUI.TextControl : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
}
public protocol IconInformerInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var message: Swift.String { get set }
}
extension YooMoneyUI.SwitchItemView {
  public enum Styles {
    public static let primary: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
  }
}
extension YooMoneyUI.TagItemView {
  public enum Styles {
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.TextDialog {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let iconText: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeProgressValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SmallFullImageGridViewShimmer : YooMoneyUI.CardTemplate {
  @objc deinit
}
extension YooMoneyUI.TextControl {
  public enum BottomHintMode {
    case never
    case whileActiveOrError
    public static let `default`: YooMoneyUI.TextControl.BottomHintMode
    public static func == (a: YooMoneyUI.TextControl.BottomHintMode, b: YooMoneyUI.TextControl.BottomHintMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconTagItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.IconTagItemTableViewCell : YooMoneyUI.IconTagItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func iconTagItemViewDidPressTag(_ itemView: YooMoneyUI.IconTagItemViewInput)
}
extension YooMoneyUI.TextControl {
  public enum ClearMode {
    case never
    case whileEditing
    case always
    public static let `default`: YooMoneyUI.TextControl.ClearMode
    public static func == (a: YooMoneyUI.TextControl.ClearMode, b: YooMoneyUI.TextControl.ClearMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.IconValueItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconTagItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.IconTagItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconTagItemView : YooMoneyUI.IconTagItemViewInput {
}
extension YooMoneyUI.IconTagItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.IconDetailsItemTableViewCell {
  public enum Styles {
    public static let darkTitle: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
public struct TourViewModel {
  public let items: [YooMoneyUI.TourViewModel.Item]
  public let submitTitle: Swift.String?
  public let style: YooMoneyUI.Style?
  public init(items: [YooMoneyUI.TourViewModel.Item], submitTitle: Swift.String? = nil, style: YooMoneyUI.Style? = nil)
}
extension YooMoneyUI.TourViewModel {
  public struct Item {
    public let image: UIKit.UIImage
    public let title: Swift.String
    public let subtitle: Swift.String?
    public let submitTitle: Swift.String?
    public let list: [(icon: UIKit.UIImage, title: Swift.String, subtitle: Swift.String?)]
    public let details: (icon: UIKit.UIImage, title: Swift.String)?
    public let style: YooMoneyUI.Style?
    public init(image: UIKit.UIImage, title: Swift.String, subtitle: Swift.String? = nil, submitTitle: Swift.String? = nil, list: [(icon: UIKit.UIImage, title: Swift.String, subtitle: Swift.String?)] = [], details: (icon: UIKit.UIImage, title: Swift.String)? = nil, style: YooMoneyUI.Style? = nil)
  }
}
extension YooMoneyUI.TagActionView {
  public enum Styles {
    public enum Tint {
      public static let normal: YooMoneyUI.Style
    }
  }
}
public protocol TagIconViewInput : AnyObject {
  var title: Swift.String? { get set }
  var icon: UIKit.UIImage? { get set }
}
extension YooMoneyUI.TagSectionTableHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let formLink: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let tag: YooMoneyUI.Style
    public static let hint: YooMoneyUI.Style
    public static let caption: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let tripleIcon: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
    public static let backgroundGrayTint: YooMoneyUI.Style
    public enum IconDefault {
      public static let normal: YooMoneyUI.Style
    }
    public static let labelTint: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Offset {
      public static let singleVertical: YooMoneyUI.Style
    }
  }
}
public protocol IconViewInput : AnyObject {
  var imageValue: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
}
public protocol ValueItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var value: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TagView : YooMoneyUI.ActionTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func setContentHuggingPriority(_ priority: UIKit.UILayoutPriority, for axis: UIKit.NSLayoutConstraint.Axis)
  @_Concurrency.MainActor(unsafe) @objc override final public func setContentCompressionResistancePriority(_ priority: UIKit.UILayoutPriority, for axis: UIKit.NSLayoutConstraint.Axis)
  @objc deinit
}
extension YooMoneyUI.TagView : YooMoneyUI.TagViewInput {
}
extension YooMoneyUI.ValueItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let tintValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let inverseTranslucent: YooMoneyUI.Style
    }
    public static let amountValue: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BadgeTemplate : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var badgesBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setBadge(value: YooMoneyUI.BadgeValue? = .left(""), position: UIKit.UIRectCorner = .bottomRight)
  @objc deinit
}
public struct HeaderActionSheetItem {
  public let title: Swift.String
  public init(title: Swift.String)
  public let cellType: UIKit.UITableViewCell.Type
  public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
}
extension YooMoneyUI.HeaderActionSheetItem : YooMoneyUI.ActionSheetItem {
  public func configureCell(_ cell: UIKit.UITableViewCell)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TitleTextDialog : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var attributedText: Foundation.NSAttributedString {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconValueImageItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension YooMoneyUI.IconValueImageItemView : YooMoneyUI.IconValueImageItemViewInput {
}
extension YooMoneyUI.IconValueImageItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIPageControl {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public enum BackgroundTint {
      public static let normal: YooMoneyUI.Style
    }
  }
}
public typealias PasscodeScreenCompletionHandler = (_ result: YooMoneyUI.PasscodeEnterResult) -> Swift.Void
open class PasscodePresenter : YooMoneyUI.PasscodeViewOutput {
  weak open var view: YooMoneyUI.PasscodeViewInput?
  open var interactor: YooMoneyUI.PasscodeInteractorInput!
  open var localAuthInteractor: YooMoneyUI.LocalAuthInteractorInput!
  public init(steps: [YooMoneyUI.PasscodeScreenStep], completionHandler: @escaping YooMoneyUI.PasscodeScreenCompletionHandler)
  open func setupBackButton(for step: YooMoneyUI.PasscodeScreenStep, at index: Swift.Int)
  open func setupBiometryButton()
  open func handleCorrectEnter()
  open func handleIncorrectEnter(error: Swift.Error? = nil)
  public func moveToPreviousStep(animated: Swift.Bool)
  public func moveToNextStep(animated: Swift.Bool)
  public func step(atIndex index: Swift.Int) -> YooMoneyUI.PasscodeScreenStep?
  public func previousStep() -> YooMoneyUI.PasscodeScreenStep?
  public func nextStep() -> YooMoneyUI.PasscodeScreenStep?
  public func currentStep() -> YooMoneyUI.PasscodeScreenStep
  public func completePasscodeEnter(withResult result: YooMoneyUI.PasscodeEnterResult)
  open func shouldProcessResult(_ result: YooMoneyUI.PasscodeEnterResult) -> Swift.Bool
  open var passcodeLength: Swift.Int {
    get
  }
  open func viewDidLoad()
  open func viewDidAppear()
  public func viewDidDisappear()
  public func viewWillDisappear()
  open func didPressCancel()
  open func didPressBack()
  open func didPressRequestBiometry()
  open func didEnterBiometry()
  open func didFailEnterBiometry()
  open func didReceiveBiometryAuthSystemFailure()
  open func didCancelEnterBiometry()
  open func didPressForgotPassword()
  open func didPressKeyboardNumber(value: Swift.String)
  open func didPressBackspace()
  open func didPressLogout()
  @objc deinit
}
extension YooMoneyUI.PasscodePresenter : YooMoneyUI.LocalAuthInteractorOutput {
  public func didPerformBiometryAuthAttempt(result: YooMoneyUI.BiometryAuthAttemptResult)
  public func didValidateBiometry(biometryParametersValid isValid: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CollectionViewCellTemplate : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) open var templateView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UINavigationItem {
  public enum Styles {
    public static let onlyLargeTitle: YooMoneyUI.Style
    public static let onlySmallTitle: YooMoneyUI.Style
    public static let automaticTitle: YooMoneyUI.Style
  }
}
public protocol LargeIconImageItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var image: UIKit.UIImage { get set }
}
public protocol IconValueImageItemViewInput : AnyObject {
  var icon: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  var image: UIKit.UIImage { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class LongTitleHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @objc deinit
}
public protocol ButtonItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var buttonTitle: Swift.String { get set }
}
public protocol ButtonItemViewOutput : AnyObject {
  func didPressButton(in itemView: YooMoneyUI.ButtonItemViewInput)
}
extension UIKit.UIEdgeInsets {
  public static let double: UIKit.UIEdgeInsets
}
@available(iOS 13, *)
public protocol LargeTagsViewDelegate : AnyObject {
  func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, didSelectItemAtIndex index: Swift.Int)
  func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, didDeselectItemAtIndex index: Swift.Int)
  func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, shouldSelectItemAtIndex index: Swift.Int) -> Swift.Bool
  func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, shouldDeselectItemAtIndex index: Swift.Int) -> Swift.Bool
}
@available(iOS 13, *)
extension YooMoneyUI.LargeTagsViewDelegate {
  public func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, didSelectItemAtIndex index: Swift.Int)
  public func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, didDeselectItemAtIndex index: Swift.Int)
  public func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, shouldSelectItemAtIndex index: Swift.Int) -> Swift.Bool
  public func largeTagsView(_ sender: YooMoneyUI.LargeTagsView, shouldDeselectItemAtIndex index: Swift.Int) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @available(iOS 13, *)
@_Concurrency.MainActor(unsafe) public class LargeTagsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: YooMoneyUI.LargeTagsViewDelegate?
  @_Concurrency.MainActor(unsafe) public var items: [YooMoneyUI.LargeTagViewModel] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setItems(items: [YooMoneyUI.LargeTagViewModel], animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public var allowsSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func selectItem(index: Swift.Int, animated: Swift.Bool = true, scrollPosition: UIKit.UICollectionView.ScrollPosition = [])
  @_Concurrency.MainActor(unsafe) public func deselectItem(index: Swift.Int, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func enableItem(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func disableItem(index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public var selectedItems: [Swift.Int] {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@available(iOS 13, *)
extension YooMoneyUI.LargeTagsView : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension YooMoneyUI.BottomSheetTemplate {
  public enum Styles {
    public enum Scroll {
      public static let disabled: YooMoneyUI.Style
      public static let enabled: YooMoneyUI.Style
    }
    public enum SheetManipulator {
      public static let arrow: YooMoneyUI.Style
      public static let line: YooMoneyUI.Style
    }
  }
}
extension UIKit.UITableViewHeaderFooterView : YooMoneyUI.Identifier {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SwitchItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var state: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.SwitchItemViewOutput?
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var switchControl: UIKit.UISwitch {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.SwitchItemView : YooMoneyUI.SwitchItemViewInput {
}
extension YooMoneyUI.SwitchItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol TagItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var tagTitle: Swift.String { get set }
}
public protocol TagItemViewOutput : AnyObject {
  func didPressTag(in itemView: YooMoneyUI.TagItemViewInput)
}
extension YooMoneyUI.TextControl {
  public enum LineMode {
    case never
    case whileActiveOrError
    public static let `default`: YooMoneyUI.TextControl.LineMode
    public static func == (a: YooMoneyUI.TextControl.LineMode, b: YooMoneyUI.TextControl.LineMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class LargeImageGridViewShimmer : YooMoneyUI.CardTemplate {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ProgressValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var currentValue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var totalValue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.TextControl {
  @objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LineView : UIKit.UIView {
    @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
    @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @_Concurrency.MainActor(unsafe) final public var state: YooMoneyUI.TextControl.LineView.State {
      get
      set(state)
    }
    @_Concurrency.MainActor(unsafe) final public func fillLine(with color: UIKit.UIColor, height: CoreFoundation.CGFloat, animated: Swift.Bool = true)
    @_Concurrency.MainActor(unsafe) final public func hideLine(animated: Swift.Bool = true)
    @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
    @objc deinit
  }
}
extension YooMoneyUI.TextControl.LineView {
  public enum State {
    case filled(color: UIKit.UIColor, height: CoreFoundation.CGFloat)
    case clear
    public static let `default`: YooMoneyUI.TextControl.LineView.State
  }
}
extension YooMoneyUI.TextControl.LineView.State : Swift.Equatable {
  public static func == (lhs: YooMoneyUI.TextControl.LineView.State, rhs: YooMoneyUI.TextControl.LineView.State) -> Swift.Bool
}
extension UIKit.UITextField {
  public enum Styles {
    public static let numeric: YooMoneyUI.Style
    public static let decimalPad: YooMoneyUI.Style
    public static let alignCenter: YooMoneyUI.Style
    public static let sizeToFitWidth: YooMoneyUI.Style
    public static let title1: YooMoneyUI.Style
    public static let title2: YooMoneyUI.Style
    public static let title3: YooMoneyUI.Style
  }
}
extension YooMoneyUI.ActionItemView {
  public enum Styles {
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum InverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum BackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setStyledTitle(_ text: Swift.String?, for state: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func styledTitle(for state: UIKit.UIControl.State) -> Swift.String?
}
extension YooMoneyUI.LargeImageGridView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let link: YooMoneyUI.Style
    public enum Bookmark {
      public static let active: YooMoneyUI.Style
      public static let inactive: YooMoneyUI.Style
      public static let hidden: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.TextControl {
  public enum PlaceholderMode {
    case never
    case whileNotActiveAndEmpty
    public static let `default`: YooMoneyUI.TextControl.PlaceholderMode
    public static func == (a: YooMoneyUI.TextControl.PlaceholderMode, b: YooMoneyUI.TextControl.PlaceholderMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol NumberKeyboardViewDelegate : AnyObject {
  func numberKeyboardView(_ numberKeyboardView: YooMoneyUI.NumberKeyboardView, didPress button: YooMoneyUI.KeyboardButton)
}
@objc @_Concurrency.MainActor(unsafe) open class NumberKeyboardView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak open var delegate: YooMoneyUI.NumberKeyboardViewDelegate?
  @_Concurrency.MainActor(unsafe) open var keyboardStyle: YooMoneyUI.KeyboardViewStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var leftFunctionButton: YooMoneyUI.KeyboardButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var rightFunctionButton: YooMoneyUI.KeyboardButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) required public init(keyboardStyle style: YooMoneyUI.KeyboardViewStyle)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TextControl {
  public enum RightButtonMode {
    case always
    case never
    case whileError
    case whileEmpty
    case whileErrorAndNotActiveOrEmpty
    case whileNotActiveAndError
    case whileNotActiveOrEmpty
    public static let `default`: YooMoneyUI.TextControl.RightButtonMode
    public static func == (a: YooMoneyUI.TextControl.RightButtonMode, b: YooMoneyUI.TextControl.RightButtonMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum YooMoneyUILib {
  public static func setup(config: YooMoneyUI.Config = .default)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func addCloseButtonIfNeeded(target: Swift.AnyObject? = nil, action: ObjectiveC.Selector)
}
extension UIKit.UITextView {
  public enum Styles {
    public static let linked: YooMoneyUI.Style
    public static let body: YooMoneyUI.Style
    public static let caption: YooMoneyUI.Style
    public static let tintLink: YooMoneyUI.Style
    public static let linkWithoutUnderline: YooMoneyUI.Style
    public static let oneTimeCode: YooMoneyUI.Style
    public static let primary: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
  }
}
extension YooMoneyUI.TextControl {
  public enum State {
    case normal
    case error
    public static let `default`: YooMoneyUI.TextControl.State
    public static func == (a: YooMoneyUI.TextControl.State, b: YooMoneyUI.TextControl.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension YooMoneyUI.TextControl.State {
  public var isError: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ImageOptionCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var normalStyle: YooMoneyUI.Style? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedStyle: YooMoneyUI.Style? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedStyle: YooMoneyUI.Style? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class KeyboardButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var identifier: Swift.String
  @_Concurrency.MainActor(unsafe) open var style: YooMoneyUI.KeyboardButtonStyle {
    get
    set
  }
  @objc deinit
}
extension YooMoneyUI.KeyboardButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
}
extension YooMoneyUI.IconValueItemView {
  public enum Styles {
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
public protocol InformerPromoViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String>? { get set }
  var title: Swift.String { get set }
  var text: Swift.String? { get set }
  var buttonTitle: Swift.String? { get set }
  var cardColor: UIKit.UIColor? { get set }
  var fontColor: UIKit.UIColor? { get set }
  var buttonBackgroundColor: UIKit.UIColor? { get set }
  var buttonFontColor: UIKit.UIColor? { get set }
}
public protocol InformerPromoViewOutput : AnyObject {
  func didPressInformerPromoButton(in item: YooMoneyUI.InformerPromoViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IconInformerShimmerCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeActionInformerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func setupView()
  @objc deinit
}
extension YooMoneyUI.LargeActionInformerTableViewCell : YooMoneyUI.LargeActionInformerOutput {
  @_Concurrency.MainActor(unsafe) final public func largeActionInformerDidPress(in sender: YooMoneyUI.LargeActionInformerInput)
}
public protocol ActivityIndicatorFullViewPresenting : YooMoneyUI.ActivityIndicatorPresenting {
  var activityContainerView: UIKit.UIView { get }
  func showFullViewActivity(style: YooMoneyUI.Style)
  func hideFullViewActivity()
}
extension YooMoneyUI.ActivityIndicatorFullViewPresenting where Self : UIKit.UIViewController {
  public var activityContainerView: UIKit.UIView {
    get
  }
  public func showFullViewActivity(style: YooMoneyUI.Style)
  public func hideFullViewActivity()
  public func showActivity()
  public func hideActivity()
}
extension YooMoneyUI.TextControl {
  public enum TopHintMode {
    case never
    case whileActiveOrNotEmpty
    public static let `default`: YooMoneyUI.TextControl.TopHintMode
    public static func == (a: YooMoneyUI.TextControl.TopHintMode, b: YooMoneyUI.TextControl.TopHintMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol ValueLargeItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var value: Swift.String { get set }
}
public protocol SwitchItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var state: Swift.Bool { get set }
}
public protocol SwitchItemViewOutput : AnyObject {
  func switchItemView(_ itemView: YooMoneyUI.SwitchItemViewInput, didChangeState state: Swift.Bool)
}
public protocol IconLabelValueItemViewInput : AnyObject {
  var icon: UIKit.UIImage { get set }
  var valueIcon: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  var details: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var iconView: YooMoneyUI.IconView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconItemView : YooMoneyUI.IconItemViewInput {
}
extension YooMoneyUI.IconItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
open class PasscodeScreenStep {
  final public let image: UIKit.UIImage?
  final public let title: Swift.String
  final public let subtitle: Swift.String?
  public var biometryAlertTitle: Swift.String?
  public var biometryAlertDescription: Swift.String
  public var isBiometryAllowed: Swift.Bool
  public var isForgotButtonAllowed: Swift.Bool
  public var isCloseScreenAllowed: Swift.Bool
  public var isLimitedForFails: Swift.Bool
  public var isValidationRequired: Swift.Bool
  public var customPasscodeValidator: YooMoneyUI.PasscodeValidator?
  public init(image: UIKit.UIImage? = nil, title: Swift.String, subtitle: Swift.String? = nil)
  @available(*, deprecated, message: "Use init(image:title:subtitle:) instead")
  convenience public init(logoName: Swift.String, title: Swift.String, subtitle: Swift.String)
  @available(*, deprecated, message: "Use init(image:title:subtitle:) instead")
  convenience public init(logoName: Swift.String, title: Swift.String)
  @objc deinit
}
extension YooMoneyUI.TextControl {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let noAutocorrection: YooMoneyUI.Style
    public static let noSpellChecking: YooMoneyUI.Style
    public static let noAutoCapitalization: YooMoneyUI.Style
    public static let rightButtonModeWhileNotActiveOrEmpty: YooMoneyUI.Style
    public static let rightButtonDefault: YooMoneyUI.Style
    public static let password: YooMoneyUI.Style
    public static let oneTimeCode: YooMoneyUI.Style
    public static let paddingHorizontal10: YooMoneyUI.Style
    public static let bordered: YooMoneyUI.Style
    public static let canShowSecured: YooMoneyUI.Style
    public static let rightButtonAsErrorImage: YooMoneyUI.Style
    public static let rightButtonWithoutImage: YooMoneyUI.Style
    public static let leftIconVisible: YooMoneyUI.Style
    public static let leftIconHidden: YooMoneyUI.Style
    @available(*, deprecated, message: "Use `default` + `password` + `numberPad` styles instead")
    public static let cardDataInput: YooMoneyUI.Style
    @available(*, deprecated, message: "Use `default` + `password` + `numberPad` styles instead")
    public static let linkedCardDataInput: YooMoneyUI.Style
    public static let numberPad: YooMoneyUI.Style
    public static let secured: YooMoneyUI.Style
    @available(*, deprecated, message: "Use `rightButtonScan` style instead")
    public static let cardDataInputWithScan: YooMoneyUI.Style
    @available(*, deprecated, message: "Use `rightButtonDefault` style instead")
    public static let cardDataInputWithoutScan: YooMoneyUI.Style
    public static let rightButtonScan: YooMoneyUI.Style
    public static let withoutTopHint: YooMoneyUI.Style
    public static let withoutBottomHint: YooMoneyUI.Style
    public static let withoutHints: YooMoneyUI.Style
    public static let withoutClearButton: YooMoneyUI.Style
    public static let tintLine: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SwitchItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var state: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var switchStateHandler: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.SwitchItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.SwitchItemTableViewCell : YooMoneyUI.SwitchItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func switchItemView(_ itemView: YooMoneyUI.SwitchItemViewInput, didChangeState state: Swift.Bool)
}
public protocol TagViewInput : AnyObject {
  var title: Swift.String? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeBadgeItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override final public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension UIKit.UIButton {
  @available(*, unavailable, renamed: "DynamicStyle")
  public enum Styles {
    @available(*, unavailable, renamed: "UIButton.DynamicStyle.primary")
    public static let primary: YooMoneyUI.Style
    @available(*, unavailable, renamed: "UIButton.DynamicStyle.secondary")
    public static let secondary: YooMoneyUI.Style
    @available(*, unavailable, renamed: "UIButton.DynamicStyle.primary")
    public static let addition: YooMoneyUI.Style
    public static let flat: YooMoneyUI.Style
    @available(*, unavailable, renamed: "UIButton.DynamicStyle.link")
    public static let link: YooMoneyUI.Style
    @available(*, unavailable, message: "Use UIButton.DynamicStyle.icon with templatedClose icon")
    public static let templatedClose: YooMoneyUI.Style
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  public enum DynamicStyle {
    public static let primary: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
    public static let inversePrimary: YooMoneyUI.Style
    public static let outline: YooMoneyUI.Style
    public static let tintImage: YooMoneyUI.Style
    public static let icon: YooMoneyUI.Style
    public static let flat: YooMoneyUI.Style
    public static let flatInverse: YooMoneyUI.Style
    public static let link: YooMoneyUI.Style
    public static let inverseLink: YooMoneyUI.Style
    public static let primaryWithIcon: YooMoneyUI.Style
    public static let primaryLogin: YooMoneyUI.Style
    public static let primaryLightLogin: YooMoneyUI.Style
    public static let iconLink: YooMoneyUI.Style
    public static let tag: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
  }
}
public protocol LinkSectionHeaderViewInput : AnyObject {
  var title: Swift.String { get set }
  var linkTitle: Swift.String { get set }
}
public protocol LinkSectionHeaderViewOutput : AnyObject {
  func didPressLink(in headerView: YooMoneyUI.LinkSectionHeaderView)
}
extension UIKit.UIColor {
  public static var darkGreen: UIKit.UIColor {
    get
  }
  public static var darkBlue: UIKit.UIColor {
    get
  }
  public static var border: UIKit.UIColor {
    get
  }
  public static var shadow: UIKit.UIColor {
    get
  }
  public static var black50: UIKit.UIColor {
    get
  }
  public static var overlay: UIKit.UIColor {
    get
  }
  public static var black75: UIKit.UIColor {
    get
  }
  public static var white90: UIKit.UIColor {
    get
  }
  public static var codGray: UIKit.UIColor {
    get
  }
  public static var mousegrey: UIKit.UIColor {
    get
  }
  public static var brightSun: UIKit.UIColor {
    get
  }
  public static var redOrange: UIKit.UIColor {
    get
  }
  public static var redOrange70: UIKit.UIColor {
    get
  }
  public static var cerulean: UIKit.UIColor {
    get
  }
  public static var battleshipGrey: UIKit.UIColor {
    get
  }
  public static var tealBlue: UIKit.UIColor {
    get
  }
  public static var darkSlateBlue: UIKit.UIColor {
    get
  }
  public static var sea: UIKit.UIColor {
    get
  }
  public static var dustyOrange: UIKit.UIColor {
    get
  }
  public static var electricPurple: UIKit.UIColor {
    get
  }
  public static var burntSienna: UIKit.UIColor {
    get
  }
  public static var pine: UIKit.UIColor {
    get
  }
  public static var dullBlue: UIKit.UIColor {
    get
  }
  public static var brightBlue: UIKit.UIColor {
    get
  }
  public static var darkIndigo: UIKit.UIColor {
    get
  }
  public static var golden: UIKit.UIColor {
    get
  }
  public static var ocher: UIKit.UIColor {
    get
  }
  public static var emeraldGreen: UIKit.UIColor {
    get
  }
  public static var brightTurquoise: UIKit.UIColor {
    get
  }
  public static var caribbean: UIKit.UIColor {
    get
  }
  public static var firefly: UIKit.UIColor {
    get
  }
  public static var divider: UIKit.UIColor {
    get
  }
  public static var cararra: UIKit.UIColor {
    get
  }
  public static var inverseCararra: UIKit.UIColor {
    get
  }
  public static var universalCarrara: UIKit.UIColor {
    get
  }
  public static var lightBackground: UIKit.UIColor {
    get
  }
  public static var secondary: UIKit.UIColor {
    get
  }
  public static var ghost: UIKit.UIColor {
    get
  }
  public static var universalGhost: UIKit.UIColor {
    get
  }
  public static var success: UIKit.UIColor {
    get
  }
  public static var inverse: UIKit.UIColor {
    get
  }
  public static var inverseTranslucent: UIKit.UIColor {
    get
  }
  public static var primary: UIKit.UIColor {
    get
  }
  public static func highlighted(from color: UIKit.UIColor) -> UIKit.UIColor
  public static func fadeTint(from color: UIKit.UIColor) -> UIKit.UIColor
  public static func accentTint(from color: UIKit.UIColor) -> UIKit.UIColor
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconItemShimmerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public struct LargeTagViewModel : Swift.Hashable {
  public enum Style {
    case tint
    case fadeTint
    case inverse
    case inverseTint
    case stroke
    public static func == (a: YooMoneyUI.LargeTagViewModel.Style, b: YooMoneyUI.LargeTagViewModel.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let image: UIKit.UIImage?
  public let title: Swift.String?
  public let style: YooMoneyUI.LargeTagViewModel.Style
  public let isCompact: Swift.Bool
  public let accessibilityIdentifier: Swift.String
  public let accessibilityLabel: Swift.String
  public init(style: YooMoneyUI.LargeTagViewModel.Style, image: UIKit.UIImage, isCompact: Swift.Bool, accessibilityIdentifier: Swift.String, accessibilityLabel: Swift.String)
  public init(style: YooMoneyUI.LargeTagViewModel.Style, image: UIKit.UIImage?, title: Swift.String, accessibilityIdentifier: Swift.String, accessibilityLabel: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: YooMoneyUI.LargeTagViewModel, b: YooMoneyUI.LargeTagViewModel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AvatarViewInput : AnyObject {
  var userImage: UIKit.UIImage? { get set }
  var placeholderText: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class ClipboardView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var normalButtonTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var copiedButtonTitle: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct StickerPosition : Swift.OptionSet, Swift.Hashable {
  public let rawValue: Swift.Int
  public static let topRight: YooMoneyUI.StickerPosition
  public static let topLeft: YooMoneyUI.StickerPosition
  public static let bottomRight: YooMoneyUI.StickerPosition
  public static let bottomLeft: YooMoneyUI.StickerPosition
  public static let all: YooMoneyUI.StickerPosition
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = YooMoneyUI.StickerPosition
  public typealias Element = YooMoneyUI.StickerPosition
  public typealias RawValue = Swift.Int
}
public protocol Sticker {
  var view: UIKit.UIView { get }
}
extension YooMoneyUI.Sticker where Self : UIKit.UIView {
  public var view: UIKit.UIView {
    get
  }
}
extension YooMoneyUI.TitleTextDialog {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let number: YooMoneyUI.Style
    public static let paymentSuccess: YooMoneyUI.Style
    public static let fail: YooMoneyUI.Style
    public static let success: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public static let dark: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
  }
}
extension UIKit.UIFont {
  public static var dynamicTitle1: UIKit.UIFont {
    get
  }
  public static var dynamicTitle2: UIKit.UIFont {
    get
  }
  public static var dynamicTitle2Light: UIKit.UIFont {
    get
  }
  public static var dynamicTitle3: UIKit.UIFont {
    get
  }
  public static var title1: UIKit.UIFont {
    get
  }
  public static var title2: UIKit.UIFont {
    get
  }
  public static var title3: UIKit.UIFont {
    get
  }
  public static var headline1: UIKit.UIFont {
    get
  }
  public static var dynamicHeadline1: UIKit.UIFont {
    get
  }
  public static var dynamicHeadline2: UIKit.UIFont {
    get
  }
  public static var dynamicHeadline3: UIKit.UIFont {
    get
  }
  public static var dynamicBody: UIKit.UIFont {
    get
  }
  public static var dynamicBodySemibold: UIKit.UIFont {
    get
  }
  public static var dynamicBodyMedium: UIKit.UIFont {
    get
  }
  public static var dynamicCaption1: UIKit.UIFont {
    get
  }
  public static var dynamicCaption1Semibold: UIKit.UIFont {
    get
  }
  public static var dynamicCaption2: UIKit.UIFont {
    get
  }
  public static var caption1: UIKit.UIFont {
    get
  }
  public static var display1: UIKit.UIFont {
    get
  }
  public static var display2: UIKit.UIFont {
    get
  }
  public static var header: UIKit.UIFont {
    get
  }
}
extension UIKit.UIFont {
  public static let display: UIKit.UIFont
  public static let headline: UIKit.UIFont
  public static let title: UIKit.UIFont
  public static let subhead1: UIKit.UIFont
  public static let subhead2: UIKit.UIFont
  public static let body1: UIKit.UIFont
  public static let body2: UIKit.UIFont
  public static let caption: UIKit.UIFont
  public static let button: UIKit.UIFont
  public static let secondaryButton: UIKit.UIFont
  public static let legal: UIKit.UIFont
}
extension UIKit.UIFont {
  public enum Kern {
    public static let s: Swift.Double
    public static let m: Swift.Double
    public static let l: Swift.Double
    public static let xl: Swift.Int
  }
}
extension UIKit.UIFont {
  public enum Face : Swift.String {
    case regular
    case light
    case medium
    case semibold
    case bold
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension UIKit.UIFont {
  @available(*, deprecated, message: "Use constants")
  public static func lightSystemFont(ofSize fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont
  @available(*, deprecated, message: "Use constants")
  public static func semiboldSystemFont(ofSize fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont
  @available(*, deprecated, message: "Use constants")
  public static func mediumSystemFont(ofSize fontSize: CoreFoundation.CGFloat) -> UIKit.UIFont
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SmallIconGridViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension UIKit.UIImage {
  @available(*, deprecated, message: "Use UIImage.Action.arrowRight instead")
  public static var disclosureIndicator: UIKit.UIImage {
    get
  }
  public static var templatedClose: UIKit.UIImage {
    get
  }
  public static var user: UIKit.UIImage {
    get
  }
  public static var locationPin: UIKit.UIImage {
    get
  }
  public static var bonusSign: UIKit.UIImage {
    get
  }
  public enum Transfers {
    public static var pay: UIKit.UIImage {
      get
    }
    public static var sbp: UIKit.UIImage {
      get
    }
  }
  public enum SpendingAnalytics {
    public static var change: UIKit.UIImage {
      get
    }
  }
  public enum Other {
    public static var add: UIKit.UIImage {
      get
    }
    public static var arrowLeft: UIKit.UIImage {
      get
    }
    public static var arrowRight: UIKit.UIImage {
      get
    }
    public static var qr: UIKit.UIImage {
      get
    }
    public static var search: UIKit.UIImage {
      get
    }
    public static var auto: UIKit.UIImage {
      get
    }
    public static var billscan: UIKit.UIImage {
      get
    }
    public static var discount: UIKit.UIImage {
      get
    }
    public static var filter: UIKit.UIImage {
      get
    }
    public static var fines: UIKit.UIImage {
      get
    }
    public static var gaming: UIKit.UIImage {
      get
    }
    public static var home: UIKit.UIImage {
      get
    }
    public static var investing: UIKit.UIImage {
      get
    }
    public static var like: UIKit.UIImage {
      get
    }
    public static var loyalty: UIKit.UIImage {
      get
    }
    public static var phone: UIKit.UIImage {
      get
    }
    public static var wirelessInternet: UIKit.UIImage {
      get
    }
    public static var addMoney: UIKit.UIImage {
      get
    }
    public static var high: UIKit.UIImage {
      get
    }
    public static var low: UIKit.UIImage {
      get
    }
    public static var popular: UIKit.UIImage {
      get
    }
  }
  public enum Action {
    public static var key: UIKit.UIImage {
      get
    }
    public static var graph: UIKit.UIImage {
      get
    }
    public static var info_l: UIKit.UIImage {
      get
    }
    public static var pie: UIKit.UIImage {
      get
    }
    public static var addTint: UIKit.UIImage {
      get
    }
    public static var add: UIKit.UIImage {
      get
    }
    public static var addCard: UIKit.UIImage {
      get
    }
    public static var attention_l: UIKit.UIImage {
      get
    }
    public static var block: UIKit.UIImage {
      get
    }
    public static var bonus: UIKit.UIImage {
      get
    }
    public static var camera: UIKit.UIImage {
      get
    }
    public static var cardClose: UIKit.UIImage {
      get
    }
    public static var cardCurrency_l: UIKit.UIImage {
      get
    }
    public static var cardMoney: UIKit.UIImage {
      get
    }
    public static var cardInMotion: UIKit.UIImage {
      get
    }
    public static var card_l: UIKit.UIImage {
      get
    }
    public static var cash: UIKit.UIImage {
      get
    }
    public static var chat: UIKit.UIImage {
      get
    }
    public static var close_l: UIKit.UIImage {
      get
    }
    public static var copy_l: UIKit.UIImage {
      get
    }
    public static var currency_l: UIKit.UIImage {
      get
    }
    public static var cvc: UIKit.UIImage {
      get
    }
    public static var download: UIKit.UIImage {
      get
    }
    public static var edit_l: UIKit.UIImage {
      get
    }
    public static var favouriteFilled_l: UIKit.UIImage {
      get
    }
    public static var image: UIKit.UIImage {
      get
    }
    @available(*, deprecated, message: "Use notification_l instead")
    public static var notification: UIKit.UIImage {
      get
    }
    public static var notification_l: UIKit.UIImage {
      get
    }
    public static var notification_m: UIKit.UIImage {
      get
    }
    public static var number: UIKit.UIImage {
      get
    }
    public static var okay: UIKit.UIImage {
      get
    }
    public static var pinCode: UIKit.UIImage {
      get
    }
    public static var `repeat`: UIKit.UIImage {
      get
    }
    public static var settings: UIKit.UIImage {
      get
    }
    public static var sms: UIKit.UIImage {
      get
    }
    public static var timerFilled: UIKit.UIImage {
      get
    }
    public static var timer: UIKit.UIImage {
      get
    }
    public static var travel: UIKit.UIImage {
      get
    }
    public static var starActive: UIKit.UIImage {
      get
    }
    public static var starDefault: UIKit.UIImage {
      get
    }
    public static var addSimple: UIKit.UIImage {
      get
    }
    public static var arrowLeft: UIKit.UIImage {
      get
    }
    public static var arrowRight: UIKit.UIImage {
      get
    }
    public static var attention: UIKit.UIImage {
      get
    }
    public static var dislike: UIKit.UIImage {
      get
    }
    public static var like: UIKit.UIImage {
      get
    }
    public static var ok: UIKit.UIImage {
      get
    }
    public static var close: UIKit.UIImage {
      get
    }
    public static var favourite: UIKit.UIImage {
      get
    }
    public static var card: UIKit.UIImage {
      get
    }
    public static var currency: UIKit.UIImage {
      get
    }
    public static var cardCurrency: UIKit.UIImage {
      get
    }
    public static var walletBlock: UIKit.UIImage {
      get
    }
    public static var bookmark: UIKit.UIImage {
      get
    }
    public static var search: UIKit.UIImage {
      get
    }
    public static var edit: UIKit.UIImage {
      get
    }
    public static var copy: UIKit.UIImage {
      get
    }
    public static var circle: UIKit.UIImage {
      get
    }
    public static var info: UIKit.UIImage {
      get
    }
    public static var hint: UIKit.UIImage {
      get
    }
    public static var ruble: UIKit.UIImage {
      get
    }
    public static var dollar: UIKit.UIImage {
      get
    }
    public static var checkOff: UIKit.UIImage {
      get
    }
    public static var checkOn: UIKit.UIImage {
      get
    }
    public static var radioOn: UIKit.UIImage {
      get
    }
    public static var favorites: UIKit.UIImage {
      get
    }
    public static var plus: UIKit.UIImage {
      get
    }
  }
  public enum ActionItem {
    public static var delete: UIKit.UIImage {
      get
    }
    public static var image: UIKit.UIImage {
      get
    }
    public static var camera: UIKit.UIImage {
      get
    }
    public static var reload: UIKit.UIImage {
      get
    }
    public static var track: UIKit.UIImage {
      get
    }
  }
  public enum Informer {
    public static var notify: UIKit.UIImage {
      get
    }
    public static var replenishment: UIKit.UIImage {
      get
    }
    public static var payment: UIKit.UIImage {
      get
    }
    public static var status: UIKit.UIImage {
      get
    }
    public static var statusIdentified: UIKit.UIImage {
      get
    }
    public static var card: UIKit.UIImage {
      get
    }
    public static var credit: UIKit.UIImage {
      get
    }
    public static var virtualCard: UIKit.UIImage {
      get
    }
    public static var loyaltyCards: UIKit.UIImage {
      get
    }
    public static var pendingConfirmations: UIKit.UIImage {
      get
    }
    public static var analytics: UIKit.UIImage {
      get
    }
    public static var identification: UIKit.UIImage {
      get
    }
    public static var accountSuspension: UIKit.UIImage {
      get
    }
    public static var bonusProgram: UIKit.UIImage {
      get
    }
    public static var multiAccounts: UIKit.UIImage {
      get
    }
    public static var emergencyAlert: UIKit.UIImage {
      get
    }
  }
  public enum SearchHistory {
    public static var search: UIKit.UIImage {
      get
    }
  }
  public enum Profile {
    public static var customization: UIKit.UIImage {
      get
    }
    public static var linkedCards: UIKit.UIImage {
      get
    }
    public static var inviteFriend: UIKit.UIImage {
      get
    }
    public static var personalCard: UIKit.UIImage {
      get
    }
    public static var exit: UIKit.UIImage {
      get
    }
    public static var widgets: UIKit.UIImage {
      get
    }
    public static var selfEmployed: UIKit.UIImage {
      get
    }
  }
  public enum Badge {
    public static var block: UIKit.UIImage {
      get
    }
    public static var favorite: UIKit.UIImage {
      get
    }
    public static var inProgress: UIKit.UIImage {
      get
    }
    public static var success: UIKit.UIImage {
      get
    }
    public static var error: UIKit.UIImage {
      get
    }
    public static var notify: UIKit.UIImage {
      get
    }
    public static var alarm: UIKit.UIImage {
      get
    }
    public static var wallet: UIKit.UIImage {
      get
    }
    public static var `return`: UIKit.UIImage {
      get
    }
  }
  public enum Replenishment {
    public static var bankCard: UIKit.UIImage {
      get
    }
    public static var applePay: UIKit.UIImage {
      get
    }
    public static var applePayBlack: UIKit.UIImage {
      get
    }
    public static var mobile: UIKit.UIImage {
      get
    }
    public static var cash: UIKit.UIImage {
      get
    }
    public static var sberbank: UIKit.UIImage {
      get
    }
    public static var sberPay: UIKit.UIImage {
      get
    }
    public static var pin: UIKit.UIImage {
      get
    }
    public static var moneyRequest: UIKit.UIImage {
      get
    }
    public static var other: UIKit.UIImage {
      get
    }
  }
  public enum TransferType {
    public static var walletToWallet: UIKit.UIImage {
      get
    }
    public static var sbp: UIKit.UIImage {
      get
    }
    public static var walletToCard: UIKit.UIImage {
      get
    }
    public static var cardToCard: UIKit.UIImage {
      get
    }
    public static var walletToVk: UIKit.UIImage {
      get
    }
    public static var walletToWu: UIKit.UIImage {
      get
    }
    public static var walletToAlfabank: UIKit.UIImage {
      get
    }
    public static var walletToQiwi: UIKit.UIImage {
      get
    }
  }
  public enum PaymentSystem {
    public enum Filled {
      public static var amex: UIKit.UIImage {
        get
      }
      public static var bankCard: UIKit.UIImage {
        get
      }
      public static var dankort: UIKit.UIImage {
        get
      }
      public static var dinersClub: UIKit.UIImage {
        get
      }
      public static var discover: UIKit.UIImage {
        get
      }
      public static var instaPay: UIKit.UIImage {
        get
      }
      public static var jcb: UIKit.UIImage {
        get
      }
      public static var laser: UIKit.UIImage {
        get
      }
      public static var maestro: UIKit.UIImage {
        get
      }
      public static var masterCard: UIKit.UIImage {
        get
      }
      public static var mir: UIKit.UIImage {
        get
      }
      public static var solo: UIKit.UIImage {
        get
      }
      public static var `switch`: UIKit.UIImage {
        get
      }
      public static var unionPay: UIKit.UIImage {
        get
      }
      public static var unknown: UIKit.UIImage {
        get
      }
      public static var visa: UIKit.UIImage {
        get
      }
    }
    public enum FilledColor {
      public static var amex: UIKit.UIImage {
        get
      }
      public static var bankCard: UIKit.UIImage {
        get
      }
      public static var dankort: UIKit.UIImage {
        get
      }
      public static var dinersClub: UIKit.UIImage {
        get
      }
      public static var discover: UIKit.UIImage {
        get
      }
      public static var instaPay: UIKit.UIImage {
        get
      }
      public static var jcb: UIKit.UIImage {
        get
      }
      public static var laser: UIKit.UIImage {
        get
      }
      public static var maestro: UIKit.UIImage {
        get
      }
      public static var masterCard: UIKit.UIImage {
        get
      }
      public static var mir: UIKit.UIImage {
        get
      }
      public static var solo: UIKit.UIImage {
        get
      }
      public static var `switch`: UIKit.UIImage {
        get
      }
      public static var unionPay: UIKit.UIImage {
        get
      }
      public static var unknown: UIKit.UIImage {
        get
      }
      public static var visa: UIKit.UIImage {
        get
      }
    }
    public enum TextControl {
      public static var bankCard: UIKit.UIImage {
        get
      }
      public static var maestro: UIKit.UIImage {
        get
      }
      public static var mir: UIKit.UIImage {
        get
      }
      public static var visa: UIKit.UIImage {
        get
      }
      public static var masterCard: UIKit.UIImage {
        get
      }
    }
    public static var amex: UIKit.UIImage {
      get
    }
    public static var bankCard: UIKit.UIImage {
      get
    }
    public static var dankort: UIKit.UIImage {
      get
    }
    public static var dinersClub: UIKit.UIImage {
      get
    }
    public static var discover: UIKit.UIImage {
      get
    }
    public static var instaPay: UIKit.UIImage {
      get
    }
    public static var jcb: UIKit.UIImage {
      get
    }
    public static var laser: UIKit.UIImage {
      get
    }
    public static var maestro: UIKit.UIImage {
      get
    }
    public static var masterCard: UIKit.UIImage {
      get
    }
    public static var mir: UIKit.UIImage {
      get
    }
    public static var solo: UIKit.UIImage {
      get
    }
    public static var `switch`: UIKit.UIImage {
      get
    }
    public static var unionPay: UIKit.UIImage {
      get
    }
    public static var unknown: UIKit.UIImage {
      get
    }
    public static var visa: UIKit.UIImage {
      get
    }
  }
  public enum Service {
    @available(*, deprecated, message: "Will be removed in future. Use `Category`")
    public enum Customize {
      public static var communalServices: UIKit.UIImage {
        get
      }
      public static var credits: UIKit.UIImage {
        get
      }
      public static var discount: UIKit.UIImage {
        get
      }
      public static var entertainment: UIKit.UIImage {
        get
      }
      public static var favourites: UIKit.UIImage {
        get
      }
      public static var internet: UIKit.UIImage {
        get
      }
      public static var others: UIKit.UIImage {
        get
      }
      public static var phone: UIKit.UIImage {
        get
      }
      public static var qr: UIKit.UIImage {
        get
      }
      public static var search: UIKit.UIImage {
        get
      }
      public static var transfer: UIKit.UIImage {
        get
      }
      public static var autopayments: UIKit.UIImage {
        get
      }
      public static var rlClub: UIKit.UIImage {
        get
      }
      public static var transport: UIKit.UIImage {
        get
      }
      public static var bonus: UIKit.UIImage {
        get
      }
      public static var loyalty: UIKit.UIImage {
        get
      }
      public static var investing: UIKit.UIImage {
        get
      }
      public static var fines: UIKit.UIImage {
        get
      }
      public static var parking: UIKit.UIImage {
        get
      }
      public static var cashbackForCheck: UIKit.UIImage {
        get
      }
    }
    public static var communalServices: UIKit.UIImage {
      get
    }
    public static var credits: UIKit.UIImage {
      get
    }
    public static var discount: UIKit.UIImage {
      get
    }
    public static var entertainment: UIKit.UIImage {
      get
    }
    public static var favourites: UIKit.UIImage {
      get
    }
    public static var internet: UIKit.UIImage {
      get
    }
    public static var others: UIKit.UIImage {
      get
    }
    public static var phone: UIKit.UIImage {
      get
    }
    public static var qr: UIKit.UIImage {
      get
    }
    public static var search: UIKit.UIImage {
      get
    }
    public static var transfer: UIKit.UIImage {
      get
    }
    public static var autopayments: UIKit.UIImage {
      get
    }
    public static var rlclub: UIKit.UIImage {
      get
    }
    public static var transport: UIKit.UIImage {
      get
    }
    public static var loyalty: UIKit.UIImage {
      get
    }
    public static var yammi: UIKit.UIImage {
      get
    }
    public static var investing: UIKit.UIImage {
      get
    }
    public static var cinema: UIKit.UIImage {
      get
    }
    public static var fines: UIKit.UIImage {
      get
    }
    public static var parking: UIKit.UIImage {
      get
    }
    public static var ironMoney: UIKit.UIImage {
      get
    }
    public static var games: UIKit.UIImage {
      get
    }
    public static var cashbackForCheck: UIKit.UIImage {
      get
    }
  }
  public enum Map {
    public static var plus: UIKit.UIImage {
      get
    }
    public static var minus: UIKit.UIImage {
      get
    }
    public static var menu: UIKit.UIImage {
      get
    }
    public static var location: UIKit.UIImage {
      get
    }
    public static var geoPosition: UIKit.UIImage {
      get
    }
    public static var route: UIKit.UIImage {
      get
    }
    public static var selectedPoint: UIKit.UIImage {
      get
    }
    public static var pin: UIKit.UIImage {
      get
    }
  }
  public enum Credit {
    public static var creditAttention: UIKit.UIImage {
      get
    }
    public static var actionInProcess: UIKit.UIImage {
      get
    }
    public static var creditInCourt: UIKit.UIImage {
      get
    }
    public static var calendar: UIKit.UIImage {
      get
    }
    public static var amount: UIKit.UIImage {
      get
    }
    public static var payment: UIKit.UIImage {
      get
    }
  }
  public enum EmptyState {
    public static var timer: UIKit.UIImage {
      get
    }
    public static var attention: UIKit.UIImage {
      get
    }
    public static var error: UIKit.UIImage {
      get
    }
    public static var warning: UIKit.UIImage {
      get
    }
    public static var sandglass: UIKit.UIImage {
      get
    }
    public static var ok: UIKit.UIImage {
      get
    }
    public static var fail: UIKit.UIImage {
      get
    }
    public static var search: UIKit.UIImage {
      get
    }
    public static var research: UIKit.UIImage {
      get
    }
    public static var wishlist: UIKit.UIImage {
      get
    }
  }
  public enum LinkedBankCardList {
    public static var emptyList: UIKit.UIImage {
      get
    }
  }
  public enum Category {
    public static var advertisment: UIKit.UIImage {
      get
    }
    public static var auction: UIKit.UIImage {
      get
    }
    public static var auto: UIKit.UIImage {
      get
    }
    public static var autopayments: UIKit.UIImage {
      get
    }
    public static var bank: UIKit.UIImage {
      get
    }
    public static var baseOperation: UIKit.UIImage {
      get
    }
    public static var billscan: UIKit.UIImage {
      get
    }
    public static var bonus: UIKit.UIImage {
      get
    }
    public static var calendar: UIKit.UIImage {
      get
    }
    public static var contact: UIKit.UIImage {
      get
    }
    public static var dating: UIKit.UIImage {
      get
    }
    public static var discount: UIKit.UIImage {
      get
    }
    public static var document: UIKit.UIImage {
      get
    }
    public static var etc: UIKit.UIImage {
      get
    }
    public static var fillWallet: UIKit.UIImage {
      get
    }
    public static var fines: UIKit.UIImage {
      get
    }
    public static var game: UIKit.UIImage {
      get
    }
    public static var gaming: UIKit.UIImage {
      get
    }
    public static var home: UIKit.UIImage {
      get
    }
    public static var homeServices: UIKit.UIImage {
      get
    }
    public static var hostingDomain: UIKit.UIImage {
      get
    }
    public static var internet: UIKit.UIImage {
      get
    }
    public static var investing: UIKit.UIImage {
      get
    }
    public static var ipPhone: UIKit.UIImage {
      get
    }
    public static var ironMoney: UIKit.UIImage {
      get
    }
    public static var landlinePhone: UIKit.UIImage {
      get
    }
    public static var moneyback: UIKit.UIImage {
      get
    }
    public static var moneylandia: UIKit.UIImage {
      get
    }
    public static var more: UIKit.UIImage {
      get
    }
    public static var loyalty: UIKit.UIImage {
      get
    }
    public static var musicCinema: UIKit.UIImage {
      get
    }
    public static var moneyRequest: UIKit.UIImage {
      get
    }
    public static var packman: UIKit.UIImage {
      get
    }
    public static var parking: UIKit.UIImage {
      get
    }
    public static var phone: UIKit.UIImage {
      get
    }
    public static var qr: UIKit.UIImage {
      get
    }
    public static var repeater: UIKit.UIImage {
      get
    }
    public static var rlClub: UIKit.UIImage {
      get
    }
    public static var route: UIKit.UIImage {
      get
    }
    public static var search: UIKit.UIImage {
      get
    }
    public static var socialNetworks: UIKit.UIImage {
      get
    }
    public static var star: UIKit.UIImage {
      get
    }
    public static var tickets: UIKit.UIImage {
      get
    }
    public static var transfer: UIKit.UIImage {
      get
    }
    public static var tv: UIKit.UIImage {
      get
    }
    public static var wirelessInternet: UIKit.UIImage {
      get
    }
    public static var credit: UIKit.UIImage {
      get
    }
    public static var research: UIKit.UIImage {
      get
    }
    public static var wishlist: UIKit.UIImage {
      get
    }
  }
  public enum Shopping {
    public static var link: UIKit.UIImage {
      get
    }
    public static var placeholder: UIKit.UIImage {
      get
    }
    public static var ellipse: UIKit.UIImage {
      get
    }
    public static var credit: UIKit.UIImage {
      get
    }
    public static var creditWhite: UIKit.UIImage {
      get
    }
    public static var discount: UIKit.UIImage {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeBadgeItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeBadgeItemView : YooMoneyUI.LargeBadgeItemViewInput {
}
extension YooMoneyUI.LargeBadgeItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SmallImageGridViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class ActionTemplate : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func tintColorDidChange()
  @_Concurrency.MainActor(unsafe) public func setStyle(_ style: YooMoneyUI.Style, for state: UIKit.UIControl.State)
  @objc deinit
}
extension UIKit.UILabel {
  public enum Styles {
    public static let display: YooMoneyUI.Style
    public static let headline: YooMoneyUI.Style
    public static let title: YooMoneyUI.Style
    public static let subhead1: YooMoneyUI.Style
    public static let subhead2: YooMoneyUI.Style
    public static let body1: YooMoneyUI.Style
    public static let body2: YooMoneyUI.Style
    public static let spacing: YooMoneyUI.Style
    public static let caption: YooMoneyUI.Style
    public static let button: YooMoneyUI.Style
    public static let secondaryButton: YooMoneyUI.Style
    public static let uppercased: YooMoneyUI.Style
    public static let amount: YooMoneyUI.Style
    public static let sizeToFitWidth: YooMoneyUI.Style
    public static let strikethrough: YooMoneyUI.Style
    public static let bonusSign: YooMoneyUI.Style
    public static let primary: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
    public static let doubleLine: YooMoneyUI.Style
    public static let tripleLine: YooMoneyUI.Style
    public static let quadrupleLine: YooMoneyUI.Style
    public static let alignLeft: YooMoneyUI.Style
    public static let alignRight: YooMoneyUI.Style
    public static let alignCenter: YooMoneyUI.Style
    public static let truncatingHead: YooMoneyUI.Style
    public static let simpleActionSheetItem: YooMoneyUI.Style
    public static let actionSheetHeader: YooMoneyUI.Style
  }
}
extension UIKit.UILabel {
  public enum DynamicStyle {
    public static let display1: YooMoneyUI.Style
    public static let display2: YooMoneyUI.Style
    public static let header: YooMoneyUI.Style
    public static let title1: YooMoneyUI.Style
    public static let title2: YooMoneyUI.Style
    public static let title2Light: YooMoneyUI.Style
    public static let title3: YooMoneyUI.Style
    public static let headline1: YooMoneyUI.Style
    public static let body: YooMoneyUI.Style
    public static let bodySemibold: YooMoneyUI.Style
    public static let bodyMedium: YooMoneyUI.Style
    public static let headline2: YooMoneyUI.Style
    public static let headline3: YooMoneyUI.Style
    public static let caption1: YooMoneyUI.Style
    public static let caption1Semibold: YooMoneyUI.Style
    public static let caption2: YooMoneyUI.Style
  }
  @available(*, deprecated, message: "Use UILabel.DynamicStyle.* instead")
  public enum Leading {
    public static let small: YooMoneyUI.Style
    public static let normal: YooMoneyUI.Style
    public static let large: YooMoneyUI.Style
  }
  public enum ColorStyle {
    public static let primary: YooMoneyUI.Style
    public static let secondary: YooMoneyUI.Style
    public static let ghost: YooMoneyUI.Style
    public static let alert: YooMoneyUI.Style
    public static let success: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let inverseTranslucent: YooMoneyUI.Style
    public static let secondaryInverse: YooMoneyUI.Style
    public enum Link {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension UIKit.UIViewController : YooMoneyUI.NotificationPresenting {
  @_Concurrency.MainActor(unsafe) public func present(_ notification: YooMoneyUI.PresentableNotification)
  @_Concurrency.MainActor(unsafe) public func present(_ notification: YooMoneyUI.PresentableNotification, accessibilityIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func presentError(with message: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SmallImageGridView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
extension YooMoneyUI.TagIconView {
  public enum Styles {
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum InverseTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum Stroke {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum Size {
      public static let `default`: YooMoneyUI.Style
      public static let compact: YooMoneyUI.Style
    }
  }
}
public protocol NotificationPresenting : AnyObject {
  func present(_ notification: YooMoneyUI.PresentableNotification)
  func present(_ notification: YooMoneyUI.PresentableNotification, accessibilityIdentifier: Swift.String?)
  func presentError(with message: Swift.String)
}
public protocol LargeIconItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NotificationView : UIKit.UIView {
  public struct Action {
    public init(title: Swift.String, accessibilityIdentifier: Swift.String? = nil, action: @escaping () -> Swift.Void)
  }
  @_Concurrency.MainActor(unsafe) public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var actions: [YooMoneyUI.NotificationView.Action] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.NotificationView {
  public enum Styles {
    public static let error: YooMoneyUI.Style
    public static let success: YooMoneyUI.Style
    public static let info: YooMoneyUI.Style
    public static let alert: YooMoneyUI.Style
  }
}
infix operator ?< : DefaultPrecedence
extension YooMoneyUI.TagLargeCollectionViewCell {
  public enum Styles {
    public static let tint: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let inverseTint: YooMoneyUI.Style
    public static let stroke: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TagLargeView : YooMoneyUI.ActionTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TagLargeView : YooMoneyUI.TagLargeViewInput {
}
@objc @_Concurrency.MainActor(unsafe) open class CircleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var filled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UISegmentedControl {
  public enum Styles {
    public static let underline: YooMoneyUI.Style
  }
}
extension UIKit.UIView {
  public enum Styles {
    public static let separator: YooMoneyUI.Style
    public static let defaultBackground: YooMoneyUI.Style
    public static let lightBackground: YooMoneyUI.Style
    public static let tintBackground: YooMoneyUI.Style
    public static let inverseBackground: YooMoneyUI.Style
    public static let grayBackground: YooMoneyUI.Style
    public static let semiTransparent: YooMoneyUI.Style
    public static let alertTint: YooMoneyUI.Style
    public static let successTint: YooMoneyUI.Style
    public static let darkTint: YooMoneyUI.Style
    public static let transparent: YooMoneyUI.Style
    public static let roundedGrayBorder: YooMoneyUI.Style
    public static let heightAsContent: YooMoneyUI.Style
    public static let widthAsContent: YooMoneyUI.Style
    public static let shadow: YooMoneyUI.Style
    public static let withoutShadow: YooMoneyUI.Style
    public static let shadowOffsetToTop: YooMoneyUI.Style
    public static let accentTintBackground: YooMoneyUI.Style
  }
}
@available(*, deprecated, renamed: "IconLargeValueItemTableViewCell")
public typealias IconLargeValueItemViewTableViewCell = YooMoneyUI.IconLargeValueItemTableViewCell
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLargeValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.IconLargeValueItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public protocol TagSectionHeaderViewInput : AnyObject {
  var title: Swift.String { get set }
  var tagTitle: Swift.String { get set }
}
public protocol TagSectionHeaderViewOutput : AnyObject {
  func didPressTitle(in headerView: YooMoneyUI.TagSectionHeaderViewInput)
  func didPressTag(in headerView: YooMoneyUI.TagSectionHeaderViewInput)
}
extension YooMoneyUI.ShimmerView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
  }
}
extension YooMoneyUI.TagLargeView {
  public enum Styles {
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum InverseTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum Stroke {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
  }
}
public protocol TourViewControllerDelegate : AnyObject {
  func tourView(_ sender: YooMoneyUI.TourViewController, didPressSubmitAtIndex index: Swift.Int?)
}
@objc open class WebBrowserPresenter : ObjectiveC.NSObject {
  public typealias AuthenticationChallengeHandler = (Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void
  public init(screenName: Swift.String? = nil, authenticationChallengeHandler: YooMoneyUI.WebBrowserPresenter.AuthenticationChallengeHandler? = nil)
  open func setupView()
  open func viewWillDisappear()
  @objc open func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @objc open func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc open func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc open func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc open func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc open func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  open func didPressCloseButton()
  @objc open func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc deinit
}
extension YooMoneyUI.WebBrowserPresenter : YooMoneyUI.WebBrowserInteractorOutput {
  public func didCreateRequest(_ request: Foundation.URLRequest, _ options: YooMoneyUI.WebBrowserOptions = [])
  public func failCreateRequest(with error: YooMoneyUI.PresentableError)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class LargeLongTitleHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @objc deinit
}
extension YooMoneyUI.IconDetailsItemView {
  public enum Styles {
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.IconLabelValueItemTableViewCell {
  public enum Styles {
    public static let alertValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public protocol WebBrowserInteractorInput : AnyObject {
  func createRequest()
  func shouldProcessRequest(_ request: Foundation.URLRequest) -> Swift.Bool
  func processRequest(_ request: Foundation.URLRequest)
}
public protocol WebBrowserInteractorOutput : AnyObject {
  func didCreateRequest(_ request: Foundation.URLRequest, _ options: YooMoneyUI.WebBrowserOptions)
  func failCreateRequest(with error: YooMoneyUI.PresentableError)
}
extension YooMoneyUI.ActivityIndicator {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    @available(*, deprecated, message: "Use Styles.tint")
    public static let primary: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
    public static let medium: YooMoneyUI.Style
    public static let large: YooMoneyUI.Style
    public static let extraLarge: YooMoneyUI.Style
    public static let extraExtraLarge: YooMoneyUI.Style
    public static let tint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    @available(*, deprecated, message: "Never use under any circumstances")
    public static let largeStroke: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TagLargeCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeImageGridViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) final public var bookmarkPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var linkPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var subvaluePressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func prepareForReuse()
  @objc deinit
}
extension YooMoneyUI.LargeImageGridViewCollectionViewCell : YooMoneyUI.StickersPresenting {
  @_Concurrency.MainActor(unsafe) final public var stickersView: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var stickersLayoutGuide: UIKit.UILayoutGuide {
    get
  }
}
extension YooMoneyUI.LargeImageGridViewCollectionViewCell : YooMoneyUI.LargeImageGridViewDelegate {
  @_Concurrency.MainActor(unsafe) final public func bookmarkDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
  @_Concurrency.MainActor(unsafe) final public func linkDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
  @_Concurrency.MainActor(unsafe) final public func subvalueDidPress(in sender: YooMoneyUI.LargeImageGridViewInput)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) final public class InformerPromoView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String>? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cardColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonFontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
@available(iOS 11.0, *)
extension YooMoneyUI.InformerPromoView : YooMoneyUI.InformerPromoViewInput {
}
public protocol IconDetailsItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  var subvalue: Swift.String { get set }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  var badge: UIKit.UIImage? { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconInformer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var iconColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var iconView: YooMoneyUI.IconView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var messageLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconInformer : YooMoneyUI.IconInformerInput {
}
extension YooMoneyUI.TagItemTableViewCell {
  public enum Styles {
    public static let tint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
@_hasMissingDesignatedInitializers public class WebBrowserAssembly {
  public static func makeModule(presenter: YooMoneyUI.WebBrowserPresenter, interactor: YooMoneyUI.WebBrowserInteractorInput) -> UIKit.UIViewController
  @objc deinit
}
extension UIKit.UITableViewCell {
  public enum Styles {
    public enum Default {
      public static let disabled: YooMoneyUI.Style
      public static let normal: YooMoneyUI.Style
    }
    public enum SelectionStyle {
      public static let none: YooMoneyUI.Style
      public static let `default`: YooMoneyUI.Style
    }
    public enum AccessoryStyle {
      public static let none: YooMoneyUI.Style
      public static let disclosureIndicator: YooMoneyUI.Style
      public static let moreIndicator: YooMoneyUI.Style
      public static let checkmark: YooMoneyUI.Style
    }
    public enum Separator {
      public static let `default`: YooMoneyUI.Style
      public static let hidden: YooMoneyUI.Style
    }
  }
}
@available(*, deprecated, renamed: "IconLargeValueItemViewInput")
public typealias IconValueLargeItemViewInput = YooMoneyUI.IconLargeValueItemViewInput
public protocol IconLargeValueItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var value: Swift.String { get set }
}
extension YooMoneyUI.IconItemView {
  public enum Styles {
    public static let darkIcon: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let tag: YooMoneyUI.Style
    public static let hint: YooMoneyUI.Style
    public static let caption: YooMoneyUI.Style
    public static let backgroundGrayTint: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
    public static let tripleIcon: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let labelTint: YooMoneyUI.Style
    public static let compact: YooMoneyUI.Style
    public enum IconText {
      public static let normal: YooMoneyUI.Style
      public static let promo: YooMoneyUI.Style
    }
    public enum Offset {
      public static let single: YooMoneyUI.Style
      public static let double: YooMoneyUI.Style
      public static let singleVertical: YooMoneyUI.Style
    }
    public enum Default {
      public static let normal: YooMoneyUI.Style
    }
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum BackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum InverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum BadgeStyle {
      public enum Masked {
        public static let small: YooMoneyUI.Style
        public static let medium: YooMoneyUI.Style
        public static let large: YooMoneyUI.Style
      }
      public enum NoneMasked {
        public static let small: YooMoneyUI.Style
        public static let medium: YooMoneyUI.Style
        public static let large: YooMoneyUI.Style
      }
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class BarcodeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var barcodeImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var code: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func setStyles(_ styles: YooMoneyUI.Style...)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) final public class InformerPromoViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String>? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cardColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonFontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@available(iOS 11.0, *)
extension YooMoneyUI.InformerPromoViewCollectionViewCell : YooMoneyUI.InformerPromoViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressInformerPromoButton(in item: YooMoneyUI.InformerPromoViewInput)
}
public protocol LargeImageItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
}
extension YooMoneyUI.ButtonItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let enabled: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let activity: YooMoneyUI.ActivityIndicator
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ActionInformer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.ActionInformerOutput?
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ActionInformer : YooMoneyUI.ActionInformerInput {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TagSectionTableHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var titlePressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension YooMoneyUI.TagSectionTableHeaderView : YooMoneyUI.TagSectionHeaderViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressTag(in headerView: YooMoneyUI.TagSectionHeaderViewInput)
  @_Concurrency.MainActor(unsafe) final public func didPressTitle(in headerView: YooMoneyUI.TagSectionHeaderViewInput)
}
extension UIKit.UIScrollView {
  public enum Styles {
    public static let interactiveKeyboardDismissMode: YooMoneyUI.Style
  }
}
public protocol ListItemView {
  var leftSeparatorInset: CoreFoundation.CGFloat { get }
}
public protocol IconTagItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var tagTitle: Swift.String { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
}
public protocol IconTagItemViewOutput : AnyObject {
  func iconTagItemViewDidPressTag(_ itemView: YooMoneyUI.IconTagItemViewInput)
}
extension UIKit.UITextField : YooMoneyUI.InputView {
  @_Concurrency.MainActor(unsafe) public var inputText: Swift.String? {
    get
    set
  }
}
extension YooMoneyUI.TextControl : YooMoneyUI.InputView {
  @_Concurrency.MainActor(unsafe) public var inputText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var beginningOfDocument: UIKit.UITextPosition {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectedTextRange: UIKit.UITextRange? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func offset(from: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func position(from position: UIKit.UITextPosition, offset: Swift.Int) -> UIKit.UITextPosition?
  @_Concurrency.MainActor(unsafe) public func textRange(from fromPosition: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> UIKit.UITextRange?
}
extension UIKit.UITextView : YooMoneyUI.InputView {
  @_Concurrency.MainActor(unsafe) public var inputText: Swift.String? {
    get
    set
  }
}
public protocol InputView : AnyObject {
  var inputText: Swift.String? { get set }
  var beginningOfDocument: UIKit.UITextPosition { get }
  var selectedTextRange: UIKit.UITextRange? { get set }
  func offset(from: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> Swift.Int
  func position(from position: UIKit.UITextPosition, offset: Swift.Int) -> UIKit.UITextPosition?
  func textRange(from fromPosition: UIKit.UITextPosition, to toPosition: UIKit.UITextPosition) -> UIKit.UITextRange?
}
public protocol InputPresenterStyle {
  func removedFormatting(from string: Swift.String) -> Swift.String
  func appendedFormatting(to string: Swift.String) -> Swift.String
  var maximalLength: Swift.Int { get }
  var postfix: Swift.String? { get }
}
extension YooMoneyUI.InputPresenterStyle {
  public var postfix: Swift.String? {
    get
  }
}
@objc public class InputPresenter : ObjectiveC.NSObject {
  weak public var output: YooMoneyUI.InputView?
  final public let style: YooMoneyUI.InputPresenterStyle
  public init(textInputStyle style: YooMoneyUI.InputPresenterStyle)
  public func input(changeCharactersIn range: Foundation.NSRange, replacementString replacement: Swift.String, currentString current: Swift.String)
  @objc deinit
}
public protocol TagActionViewInput : AnyObject {
  var title: Swift.String { get set }
}
public protocol TagActionViewOutput : AnyObject {
  func didPressButton(in itemView: YooMoneyUI.TagActionViewInput)
}
public protocol PasscodeRouterInput {
  func show(passcodeScreen viewController: UIKit.UIViewController)
  func closePasscodeScreen()
}
public struct PhoneNumberStyle : YooMoneyUI.InputPresenterStyle {
  public init(phoneNumberFormatter: YooMoneyUI.PhoneNumberFormatter)
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
public protocol AccountBalanceViewInput : AnyObject {
  var title: Swift.String { get set }
  var amount: Swift.String { get set }
  var button: UIKit.UIButton? { get set }
  func setTitleAlpha(_ alpha: CoreFoundation.CGFloat)
  func setAmountAlpha(_ alpha: CoreFoundation.CGFloat)
}
public protocol AccountBalanceViewOutput : AnyObject {
  func didPressButton(in itemView: YooMoneyUI.AccountBalanceViewInput)
}
extension YooMoneyUI.IconLargeValueItemView {
  public enum Styles {
    public static let base: YooMoneyUI.Style
    public static let heavyTitle: YooMoneyUI.Style
    public static let alertValue: YooMoneyUI.Style
    public static let whiteBackground: YooMoneyUI.Style
    public static let darkTitle: YooMoneyUI.Style
    public static let lightTitle: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
    public static let lightValue: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum SubtitleTint {
      public static let normal: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Title {
      public static let dark: YooMoneyUI.Style
    }
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TagItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.TagItemTableViewCell : YooMoneyUI.TagItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressTag(in itemView: YooMoneyUI.TagItemViewInput)
}
public struct KeyboardButtonStyle {
  public enum HighlightedType {
    case fill
    case circle
    public static func == (a: YooMoneyUI.KeyboardButtonStyle.HighlightedType, b: YooMoneyUI.KeyboardButtonStyle.HighlightedType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let backgroundColor: UIKit.UIColor
  public let highlightedColor: UIKit.UIColor
  public let textColor: UIKit.UIColor
  public let selectedTextColor: UIKit.UIColor
  public let highlightedTextColor: UIKit.UIColor
  public let highlightedType: YooMoneyUI.KeyboardButtonStyle.HighlightedType
  public let font: UIKit.UIFont
  public init(backgroundColor: UIKit.UIColor = .clear, highlightedColor: UIKit.UIColor = .clear, textColor: UIKit.UIColor = .clear, selectedTextColor: UIKit.UIColor = .clear, highlightedTextColor: UIKit.UIColor = .clear, highlightedType: YooMoneyUI.KeyboardButtonStyle.HighlightedType = .circle, font: UIKit.UIFont = .systemFont(ofSize: 20))
}
extension YooMoneyUI.StickerView {
  public enum Styles {
    public enum Discount {
      public static let normal: YooMoneyUI.Style
      public static let inverse: YooMoneyUI.Style
    }
    public enum Ellipse {
      public static let normal: YooMoneyUI.Style
      public static let inverse: YooMoneyUI.Style
    }
    public enum Credit {
      public static let normal: YooMoneyUI.Style
      public static let inverse: YooMoneyUI.Style
    }
    public static let inverse: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconValueImageItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var picture: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.AccountBalanceView {
  public enum Styles {
    public static let inverse: YooMoneyUI.Style
    public static let primary: YooMoneyUI.Style
  }
}
public struct PhoneNumberStyleWithPhoneDetection : YooMoneyUI.InputPresenterStyle {
  public init(phoneNumberFormatter: YooMoneyUI.PhoneNumberFormatter)
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
@objc public class PhoneNumberFormatter : ObjectiveC.NSObject {
  public enum CountryIdentifyMode {
    case manual
    case automatic(identifyService: YooMoneyUI.IdentifyCountryService)
  }
  final public let phoneMaxLength: Swift.Int
  public var countryCodeLength: Swift.Int {
    get
  }
  public init(countryIdentifyMode: YooMoneyUI.PhoneNumberFormatter.CountryIdentifyMode, phoneMask: Swift.String? = nil)
  @discardableResult
  public func format(phone: Swift.String) -> Swift.String
  public func isPhone(string: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeProgressValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeProgressValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.LargeIconTagItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Icon {
      public static let tint: YooMoneyUI.Style
      public static let backgroundTint: YooMoneyUI.Style
      public static let inverseBackgroundTint: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
    }
  }
}
public class IdentifyCountryService {
  final public let countryCodeMaxLength: Swift.Int
  public init()
  public func countryCode(from string: Swift.String, countryMaxLength: Swift.Int) -> Swift.String?
  @objc deinit
}
public struct YooCardPanInputPresenterStyle : YooMoneyUI.InputPresenterStyle {
  public init()
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
public protocol LargeIconTagItemViewInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var tagTitle: Swift.String { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
}
public protocol LargeIconTagItemViewOutput : AnyObject {
  func largeIconTagItemViewDidPressTag(_ itemView: YooMoneyUI.LargeIconTagItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ActionItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ActionItemView : YooMoneyUI.ActionItemViewInput {
}
public protocol SectionHeaderViewInput : AnyObject {
  var title: Swift.String { get set }
}
public protocol SectionHeaderViewOutput : AnyObject {
  func didPressTitle(in headerView: YooMoneyUI.SectionHeaderViewInput)
}
public struct CscInputPresenterStyle : YooMoneyUI.InputPresenterStyle {
  public init()
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) open class PasscodeViewController : UIKit.UIViewController, YooMoneyUI.PasscodeViewInput {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var output: YooMoneyUI.PasscodeViewOutput!
  @_Concurrency.MainActor(unsafe) open var isBackspaceButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isForgotPasscodeButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isBiometryButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isKeyboardHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var isUserInteractionEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isActivityIndicatorActive: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var defaultCirclesColor: UIKit.UIColor {
    get
  }
  @_Concurrency.MainActor(unsafe) public var validStateCirclesColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var invalidStateCirclesColor: UIKit.UIColor?
  @_Concurrency.MainActor(unsafe) public var leftFunctionButton: YooMoneyUI.KeyboardButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightFunctionButton: YooMoneyUI.KeyboardButton? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func updateActivityIndicator(activated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func keyboardButtonStyle(withFontSize size: CoreFoundation.CGFloat) -> YooMoneyUI.KeyboardButtonStyle
  @_Concurrency.MainActor(unsafe) open func makeCloseBarButtonItem() -> UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) open func makeBackBarButtonItem() -> UIKit.UIBarButtonItem
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func numberKeyboardView(_ numberKeyboardView: YooMoneyUI.NumberKeyboardView, didPress button: YooMoneyUI.KeyboardButton)
  @_Concurrency.MainActor(unsafe) open func setTouchIdButtonBlocked(_ blocked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setupNavigationBarToShowBackStep()
  @_Concurrency.MainActor(unsafe) open func setupNavigationBarToClose()
  @_Concurrency.MainActor(unsafe) open func setupNavigationBarWithoutBackButton()
  @_Concurrency.MainActor(unsafe) open func show(step: YooMoneyUI.PasscodeScreenStep, animation: YooMoneyUI.PasscodeStepAnimation?)
  @_Concurrency.MainActor(unsafe) open func showForgotPasswordDialog()
  @_Concurrency.MainActor(unsafe) open func showChangeBiometryBlockingDialog()
  @_Concurrency.MainActor(unsafe) open func showCorrectPasscodeEnter(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func showIncorrectPasscodeEnter(completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func showPasscodeLengthChange(to length: Swift.Int)
  @_Concurrency.MainActor(unsafe) public var hasPresentedViewController: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?)
  @objc deinit
}
extension YooMoneyUI.PasscodeViewController {
  @_Concurrency.MainActor(unsafe) public func setBiometryButtonType(_ type: YooMoneyUI.LocalAuthBiometryType)
}
extension YooMoneyUI.PasscodeViewController : YooMoneyUI.NumberKeyboardViewDelegate {
}
extension YooMoneyUI.LinkSectionHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let destructive: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconTagItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum TagTint {
      public static let normal: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Icon {
      public static let tint: YooMoneyUI.Style
      public static let backgroundTint: YooMoneyUI.Style
      public static let inverseBackgroundTint: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.ValueLargeItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let linkValue: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconDetailsItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TagIconView : YooMoneyUI.ActionTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TagIconView : YooMoneyUI.TagIconViewInput {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconImageItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var imageContentView: UIKit.UIImageView {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var imageContent: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public struct ExpiryDateInputPresenterStyle : YooMoneyUI.InputPresenterStyle {
  public init()
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
extension UIKit.UICollectionReusableView : YooMoneyUI.Identifier {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class LargeImageGridView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.LargeImageGridViewDelegate?
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
extension YooMoneyUI.LargeImageGridView : YooMoneyUI.LargeImageGridViewInput {
}
extension YooMoneyUI.LargeImageGridView : YooMoneyUI.StickersPresenting {
  @_Concurrency.MainActor(unsafe) final public var stickersLayoutGuide: UIKit.UILayoutGuide {
    get
  }
}
public struct AmountInputPresenterStyle : YooMoneyUI.InputPresenterStyle {
  public let postfix: Swift.String?
  public init(currency: Swift.String)
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
public struct PanInputPresenterStyle : YooMoneyUI.InputPresenterStyle {
  public init()
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
public struct IconLargeValueActionSheetItem : YooMoneyUI.ActionSheetItem {
  public let icon: UIKit.UIImage
  public let title: Swift.String
  public let subtitle: Swift.String
  public let value: Swift.String
  public let isDisabled: Swift.Bool
  public let accessibilityIdentifier: Swift.String?
  public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
  public init(icon: UIKit.UIImage, title: Swift.String, subtitle: Swift.String, value: Swift.String, isDisabled: Swift.Bool = false, accessibilityIdentifier: Swift.String? = nil, handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)? = nil)
  public var cellType: UIKit.UITableViewCell.Type {
    get
  }
  public func configureCell(_ cell: UIKit.UITableViewCell)
}
public protocol TourItemViewInput : AnyObject {
  var image: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String? { get set }
  var submitTitle: Swift.String? { get set }
  var list: [(icon: UIKit.UIImage, title: Swift.String, subtitle: Swift.String?)] { get set }
  var details: (icon: UIKit.UIImage, title: Swift.String)? { get set }
}
public protocol TourItemViewOutput : AnyObject {
  func tourItemViewDidPressSubmit(_ sender: YooMoneyUI.TourItemViewInput)
}
@objc @_Concurrency.MainActor(unsafe) public class TransitionProvider : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) public init(presentedAnimation: UIKit.UIViewControllerAnimatedTransitioning? = nil, dismissedAnimation: UIKit.UIViewControllerAnimatedTransitioning? = nil)
  @_Concurrency.MainActor(unsafe) @objc public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class FadeTransition : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @_Concurrency.MainActor(unsafe) public init(transitionDuration: Foundation.TimeInterval, startAlpha: CoreFoundation.CGFloat, finishAlpha: CoreFoundation.CGFloat, transitionContextViewKey: UIKit.UITransitionContextViewKey)
  @_Concurrency.MainActor(unsafe) @objc public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc deinit
}
extension YooMoneyUI.ActionTextDialog {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let fail: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public static let dark: YooMoneyUI.Style
    public static let agreement: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
  }
}
public protocol FixedLengthCodeControlDelegate : AnyObject {
  func fixedLengthCodeControl(_ fixedLengthCodeControl: YooMoneyUI.FixedLengthCodeControl, didGetCode code: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FixedLengthCodeControl : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: YooMoneyUI.FixedLengthCodeControlDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func becomeFirstResponder() -> Swift.Bool
  @objc deinit
}
extension YooMoneyUI.FixedLengthCodeControl {
  @_Concurrency.MainActor(unsafe) public func setLength(_ length: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setIsEditable(_ isEditable: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func clear()
}
extension UIKit.UIImageView {
  public enum Styles {
    public static let dynamicSize: YooMoneyUI.Style
    public static let contentCenter: YooMoneyUI.Style
    public static let scaleAspectFit: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SmallIconGridView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
extension YooMoneyUI.ActionInformer {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
extension YooMoneyUI.LargeLongTitleHeaderView {
  public enum Styles {
    public static let secondary: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLabelValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var valueIcon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var details: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconLabelValueItemView : YooMoneyUI.IconLabelValueItemViewInput {
}
extension YooMoneyUI.IconLabelValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@_hasMissingDesignatedInitializers public class FadeTransitionFactory {
  public static func makeFadeInTransition() -> YooMoneyUI.FadeTransition
  public static func makeFadeOutTransition() -> YooMoneyUI.FadeTransition
  @objc deinit
}
public protocol PresentableError : Swift.Error, YooMoneyUI.PresentableNotification {
}
extension YooMoneyUI.PresentableError {
  public var type: YooMoneyUI.PresentableNotificationType {
    get
  }
}
extension YooMoneyUI.IconView {
  public enum Styles {
    public static let dynamicSize: YooMoneyUI.Style
    public static let scaleAspectFit: YooMoneyUI.Style
    public static let contentCenter: YooMoneyUI.Style
    public static let backgroundGrayTint: YooMoneyUI.Style
    public enum Text {
      public static let normal: YooMoneyUI.Style
      public static let promo: YooMoneyUI.Style
    }
    public enum Default {
      public static let normal: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum InverseTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum BackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum InverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let inactive: YooMoneyUI.Style
    }
    public enum Masking {
      public static let circleImage: YooMoneyUI.Style
      public static let defaultImage: YooMoneyUI.Style
    }
    public enum BadgeStyle {
      public enum Masked {
        public static let small: YooMoneyUI.Style
        public static let medium: YooMoneyUI.Style
        public static let large: YooMoneyUI.Style
      }
      public enum NoneMasked {
        public static let small: YooMoneyUI.Style
        public static let medium: YooMoneyUI.Style
        public static let large: YooMoneyUI.Style
      }
    }
  }
}
public protocol PresentableNotificationAction {
  var title: Swift.String { get }
  var accessibilityIdentifier: Swift.String? { get }
}
extension YooMoneyUI.PresentableNotificationAction {
  public var notificationName: Foundation.Notification.Name {
    get
  }
}
public enum PresentableNotificationStyle {
  case toast
  case alert
  public static func == (a: YooMoneyUI.PresentableNotificationStyle, b: YooMoneyUI.PresentableNotificationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PresentableNotificationType {
  case error
  case success
  case info
  public static func == (a: YooMoneyUI.PresentableNotificationType, b: YooMoneyUI.PresentableNotificationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PresentableNotification {
  var title: Swift.String? { get }
  var message: Swift.String { get }
  var type: YooMoneyUI.PresentableNotificationType { get }
  var style: YooMoneyUI.PresentableNotificationStyle { get }
  var actions: [YooMoneyUI.PresentableNotificationAction] { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class Informer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var messageLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.Informer : YooMoneyUI.InformerInput {
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func register<T>(_ cellClass: T.Type) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func register<T>(_ cellClass: T.Type, orSupplementaryViewOfKind elementKind: Swift.String) where T : UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableSupplementaryView<T>(ofKind elementKind: Swift.String, withType type: T.Type, for indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(withType type: T.Type, for indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeTagItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.LargeTagItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeTagItemView : YooMoneyUI.LargeTagItemViewInput {
}
extension YooMoneyUI.LargeTagItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public typealias BadgeValue = FunctionalSwift.Either<Swift.String?, UIKit.UIImage?>
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class BadgeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var badgeBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.BadgeView : YooMoneyUI.BadgeViewInput {
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var specificLayoutGuide: UIKit.UILayoutGuide {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subtitleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeItemView : YooMoneyUI.LargeItemViewInput {
}
extension YooMoneyUI.LargeItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public struct PhoneNumberStyleWithAutoCorrection : YooMoneyUI.InputPresenterStyle {
  public init(phoneNumberFormatter: YooMoneyUI.PhoneNumberFormatter)
  public func removedFormatting(from string: Swift.String) -> Swift.String
  public func appendedFormatting(to string: Swift.String) -> Swift.String
  public var maximalLength: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SmallFullImageGridView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) final public var color: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @objc deinit
}
public enum Space {
  public static let single: CoreFoundation.CGFloat
  public static let double: CoreFoundation.CGFloat
  public static let triple: CoreFoundation.CGFloat
  public static let quadruple: CoreFoundation.CGFloat
  public static let fivefold: CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ActionSheetHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var logo: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
}
extension YooMoneyUI.LargeItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let withSingleDistance: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CardTemplate : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var shadowRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shadowColor: CoreGraphics.CGColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shadowOpacity: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var shadowOffset: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var roundedCorners: UIKit.UIRectCorner {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var contentView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconTagItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.LargeIconTagItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeIconTagItemView : YooMoneyUI.LargeIconTagItemViewInput {
}
extension YooMoneyUI.LargeIconTagItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.BarcodeView {
  public enum Styles {
    public static let stacked: YooMoneyUI.Style
    public static let matrix: YooMoneyUI.Style
  }
}
extension YooMoneyUI.LargeProgressTagItemTableViewCell {
  public enum Styles {
    public static let normal: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
extension YooMoneyUI.SectionTableHeaderView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let list: YooMoneyUI.Style
    public static let form: YooMoneyUI.Style
    public static let small: YooMoneyUI.Style
    public static let formLink: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
  }
}
public protocol IconSectionHeaderViewInput : AnyObject {
  var title: Swift.String { get set }
  var icon: UIKit.UIImage { get set }
}
public protocol IconSectionHeaderViewOutput : AnyObject {
  func didPressIcon(in headerView: YooMoneyUI.IconSectionHeaderView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconImageItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeIconImageItemView : YooMoneyUI.LargeIconImageItemViewInput {
}
extension YooMoneyUI.LargeIconImageItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class TagActionView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.TagActionViewOutput?
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TagActionView : YooMoneyUI.TagActionViewInput {
}
extension UIKit.UIContentSizeCategory {
  public var isAccessibilitySizeCategory: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IconButtonItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak public var output: YooMoneyUI.IconButtonItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
}
extension YooMoneyUI.IconButtonItemView : YooMoneyUI.IconButtonItemViewInput {
}
extension YooMoneyUI.IconButtonItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ValueItemView : YooMoneyUI.ValueItemViewInput {
}
extension YooMoneyUI.ValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.TitleItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public static let hint: YooMoneyUI.Style
    public static let captionHint: YooMoneyUI.Style
    public static let alert: YooMoneyUI.Style
    public static let dark: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let defaultIndent: YooMoneyUI.Style
    public static let smallIndent: YooMoneyUI.Style
    public static let defaultSeparator: YooMoneyUI.Style
    public static let hiddenSeparator: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
  }
}
public protocol ActionTextDialogDelegate : AnyObject {
  func didPressButton(in actionTextDialog: YooMoneyUI.ActionTextDialog)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ActionTextDialog : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.ActionTextDialogDelegate?
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class IconButtonItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var icon: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var buttonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public var itemView: YooMoneyUI.IconButtonItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.IconButtonItemTableViewCell : YooMoneyUI.IconButtonItemViewOutput {
  @_Concurrency.MainActor(unsafe) public func didPressButton(in itemView: YooMoneyUI.IconButtonItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconButtonItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.LargeIconButtonItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeIconButtonItemView : YooMoneyUI.LargeIconButtonItemViewInput {
}
extension YooMoneyUI.LargeIconButtonItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconButtonItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var leftButtonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) final public var rightButtonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.LargeIconButtonItemTableViewCell : YooMoneyUI.LargeIconButtonItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressLeftButton(in itemView: YooMoneyUI.LargeIconButtonItemViewInput)
  @_Concurrency.MainActor(unsafe) final public func didPressRightButton(in itemView: YooMoneyUI.LargeIconButtonItemViewInput)
}
public protocol InformerInput : AnyObject {
  var message: Swift.String { get set }
}
extension UIKit.UIScreen {
  @_Concurrency.MainActor(unsafe) public static var safeAreaInsets: UIKit.UIEdgeInsets {
    get
  }
}
public protocol EasyTipViewDelegate : AnyObject {
  func easyTipView(_ tipView: YooMoneyUI.EasyTipView, didDismissByTouch: Swift.Bool)
}
extension YooMoneyUI.EasyTipView {
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = true, forView view: UIKit.UIView, withinSuperview superview: UIKit.UIView? = nil)
  @_Concurrency.MainActor(unsafe) public func dismiss(completion: (() -> Swift.Void)? = nil)
}
extension YooMoneyUI.EasyTipView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class EasyTipView : UIKit.UIView {
  public enum ArrowPosition {
    case any
    case top
    case bottom
    case right
    case left
    public static func == (a: YooMoneyUI.EasyTipView.ArrowPosition, b: YooMoneyUI.EasyTipView.ArrowPosition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
}
extension YooMoneyUI.TextControl {
  public enum LeftIconMode {
    case never
    case always
    public static let `default`: YooMoneyUI.TextControl.LeftIconMode
    public static func == (a: YooMoneyUI.TextControl.LeftIconMode, b: YooMoneyUI.TextControl.LeftIconMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension YooMoneyUI.IconButtonItemView {
  public enum Styles {
    public static let iconLink: YooMoneyUI.Style
  }
}
extension YooMoneyUI.TitleItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public static let hint: YooMoneyUI.Style
    public static let captionHint: YooMoneyUI.Style
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    @available(*, deprecated, message: "Use hint + smallIndent styles instead")
    public static let secondary: YooMoneyUI.Style
    public static let alert: YooMoneyUI.Style
    public static let dark: YooMoneyUI.Style
    public static let noIndent: YooMoneyUI.Style
    public static let defaultIndent: YooMoneyUI.Style
    public static let smallIndent: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeImageItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeImageItemView : YooMoneyUI.LargeImageItemViewInput {
}
extension YooMoneyUI.LargeImageItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol SwipeAction {
  var name: Swift.String? { get }
  var additionalText: Swift.String? { get }
  var image: UIKit.UIImage? { get }
  var color: UIKit.UIColor { get }
}
public protocol SwipeActionTemplateDelegate : AnyObject {
  func swipeActionsTemplate(_ template: YooMoneyUI.SwipeActionsTemplate, didSelect action: YooMoneyUI.SwipeAction)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class SwipeActionsTemplate : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.SwipeActionTemplateDelegate?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public var rightActions: [YooMoneyUI.SwipeAction] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var leftActions: [YooMoneyUI.SwipeAction] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let contentView: UIKit.UIView
  @objc deinit
}
extension YooMoneyUI.IconTagItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum TagTint {
      public static let normal: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Icon {
      public static let tint: YooMoneyUI.Style
      public static let backgroundTint: YooMoneyUI.Style
      public static let inverseBackgroundTint: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let fadeTint: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public func withPriority(_ priority: UIKit.UILayoutPriority) -> UIKit.NSLayoutConstraint
}
public protocol BadgeViewInput : AnyObject {
  var value: YooMoneyUI.BadgeValue? { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AvatarItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var userImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var placeholderText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var userName: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var gradientColors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isFramed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let avatarView: YooMoneyUI.AvatarView
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func startAnimation()
  @objc deinit
}
public protocol AvatarItemViewInput : AnyObject {
  var userImage: UIKit.UIImage? { get set }
  var placeholderText: Swift.String { get set }
  var userName: Swift.String { get set }
  var gradientColors: [UIKit.UIColor] { get set }
  var isFramed: Swift.Bool { get set }
  func startAnimation()
}
extension YooMoneyUI.AvatarItemView {
  public enum Styles {
    public static let primary: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let normal: YooMoneyUI.Style
    public static let highlighted: YooMoneyUI.Style
  }
}
public protocol ActionSheetModuleInput : AnyObject {
}
public protocol ActionSheetModuleOutput : AnyObject {
  func actionSheetDidCancel(_ actionSheetModule: YooMoneyUI.ActionSheetModuleInput)
}
extension YooMoneyUI.LargeIconButtonItemTableViewCell {
  public enum Styles {
    public static let subtitleAccent: YooMoneyUI.Style
  }
}
extension YooMoneyUI.LargeIconButtonItemView {
  public enum Styles {
    public static let subtitleAccent: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) final public class InformerPromoViewTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String>? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var cardColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonFontColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@available(iOS 11.0, *)
extension YooMoneyUI.InformerPromoViewTableViewCell : YooMoneyUI.InformerPromoViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressInformerPromoButton(in item: YooMoneyUI.InformerPromoViewInput)
}
extension YooMoneyUI.LargeIconItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public static let hint: YooMoneyUI.Style
    public static let promo: YooMoneyUI.Style
    public static let widget: YooMoneyUI.Style
    public static let promoActionSheet: YooMoneyUI.Style
    public static let singleLine: YooMoneyUI.Style
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public enum IconDefault {
      public static let normal: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Offset {
      public static let singleLabelsLeading: YooMoneyUI.Style
      public static let doubleLabelsLeading: YooMoneyUI.Style
      public static let single: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.LargeIconItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
    public enum Title {
      public static let multiline: YooMoneyUI.Style
    }
    public enum Subtitle {
      public static let multiline: YooMoneyUI.Style
    }
    public enum IconDefault {
      public static let normal: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public static let hint: YooMoneyUI.Style
    public static let promo: YooMoneyUI.Style
    public enum Offset {
      public static let single: YooMoneyUI.Style
    }
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LargeImageGridViewShimmerCollectionViewCell : YooMoneyUI.ShimmerCollectionViewCell<YooMoneyUI.LargeImageGridViewShimmer> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconInformer {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let multiline: YooMoneyUI.Style
    public enum Advert {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Accent {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum AlertBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum BackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum AlertFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Lamp {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Promo {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
  }
}
public struct InformerActionSheetItem : YooMoneyUI.ActionSheetItem {
  public let title: Swift.String
  public let buttonTitle: Swift.String
  public let accessibilityLabel: Swift.String?
  public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
  public init(title: Swift.String, buttonTitle: Swift.String, accessibilityLabel: Swift.String? = nil, handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?)
  public var cellType: UIKit.UITableViewCell.Type {
    get
  }
  public func configureCell(_ cell: UIKit.UITableViewCell)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TagSectionHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.TagSectionHeaderViewOutput?
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var titleControl: YooMoneyUI.ActionTemplate {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension YooMoneyUI.TagSectionHeaderView : YooMoneyUI.TagSectionHeaderViewInput {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
}
extension UIKit.UIProgressView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let tint: YooMoneyUI.Style
    public static let inverse: YooMoneyUI.Style
    public static let large: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ProgressValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var currentValue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var totalValue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aCoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func tintColorDidChange()
  @objc deinit
}
extension YooMoneyUI.ProgressValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.ProgressValueItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let compact: YooMoneyUI.Style
    public static let accent: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeProgressTagItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var progress: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagPressHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
extension YooMoneyUI.LargeProgressTagItemTableViewCell : YooMoneyUI.ProgressTagItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func didPressTag(in itemView: YooMoneyUI.LargeProgressTagItemViewInput)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLargeDetailItemView : UIKit.UIView, YooMoneyUI.IconLargeDetailItemViewInput {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subtitleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subvalueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconLargeDetailItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ChatInformer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
public protocol DetailsItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var value: Swift.String { get set }
  var subvalue: Swift.String { get set }
}
extension YooMoneyUI.IconInformerCollectionViewCell {
  public enum Styles {
    public static let multiline: YooMoneyUI.Style
    public enum Advert {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Accent {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum AlertBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum AlertFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Lamp {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum Promo {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
  }
}
public protocol IconLargeDetailItemViewInput {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var value: Swift.String { get set }
  var subvalue: Swift.String { get set }
}
@available(*, deprecated, renamed: "IconLargeDetailItemTableViewCell")
public typealias IconLargeDetailItemViewTableViewCell = YooMoneyUI.IconLargeDetailItemTableViewCell
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLargeDetailItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.IconLargeDetailItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeActionInformer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.LargeActionInformerOutput?
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var message: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonAccessibilityIdentifier: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public func tintColorDidChange()
}
extension YooMoneyUI.LargeActionInformer : YooMoneyUI.LargeActionInformerInput {
}
public protocol LargeActionInformerInput : AnyObject {
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  var buttonTitle: Swift.String { get set }
  var message: Swift.String { get set }
}
public protocol LargeActionInformerOutput : AnyObject {
  func largeActionInformerDidPress(in sender: YooMoneyUI.LargeActionInformerInput)
}
extension YooMoneyUI.LargeActionInformer {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let lamp: YooMoneyUI.Style
    public static let alert: YooMoneyUI.Style
    public static let disabled: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconLargeDetailItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum IconDefault {
      public static let normal: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public static let light: YooMoneyUI.Style
    public static let alertSubtitle: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let strikethroughSubvalue: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconLargeDetailItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public enum IconDefault {
      public static let normal: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public static let alertSubtitle: YooMoneyUI.Style
    public static let positiveValue: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public static let strikethroughSubvalue: YooMoneyUI.Style
  }
}
extension YooMoneyUI.PageViewController {
  public enum Styles {
    public static let largeContent: YooMoneyUI.Style
    public enum PageControl {
      public enum BackgroundTint {
        public static let normal: YooMoneyUI.Style
      }
    }
  }
}
public protocol ActionTitleTextDialogDelegate : AnyObject {
  func didPressButton(in actionTitleTextDialog: YooMoneyUI.ActionTitleTextDialog)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ActionTitleTextDialog : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.ActionTitleTextDialogDelegate?
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var buttonTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.TagView {
  public enum Styles {
    public static let doubleLine: YooMoneyUI.Style
    public static let compact: YooMoneyUI.Style
    public static let bonuses: YooMoneyUI.Style
    public enum Tint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum FadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Inverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum SecondaryInverse {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum Stroke {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.ActionTitleTextDialog {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let fadeTint: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class GradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override final public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var colors: [UIKit.UIColor] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var locations: [Swift.Float]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var startPoint: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var endPoint: CoreFoundation.CGPoint {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TagItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var tagTitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var output: YooMoneyUI.TagItemViewOutput?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override final public var accessibilityIdentifier: Swift.String? {
    @objc get
    @objc set
  }
}
extension YooMoneyUI.TagItemView : YooMoneyUI.TagItemViewInput {
}
extension YooMoneyUI.TagItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_Concurrency.MainActor(unsafe) final public class ShapeView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override final public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var shapeType: YooMoneyUI.ShapeView.ShapeType
  @_Concurrency.MainActor(unsafe) final public var strokeColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fillColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var lineWidth: Swift.Float {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(shapeType: YooMoneyUI.ShapeView.ShapeType)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  public enum ShapeType {
    case circle
    case roundedRectangle(cornerRadius: Swift.Float)
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconImageItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconImageItemView : YooMoneyUI.IconImageItemViewInput {
}
extension YooMoneyUI.IconImageItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol IconImageItemViewInput : AnyObject {
  var title: Swift.String { get set }
  var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> { get set }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  var badge: UIKit.UIImage? { get set }
  var topRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var bottomRightBadgeValue: YooMoneyUI.BadgeValue? { get set }
  var image: UIKit.UIImage { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconImageItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var icon: FunctionalSwift.Either<UIKit.UIImage, Swift.String> {
    get
    set
  }
  @available(*, deprecated, message: "Use bottomRightBadgeValue instead")
  @_Concurrency.MainActor(unsafe) final public var badge: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var topRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var bottomRightBadgeValue: YooMoneyUI.BadgeValue? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var picture: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeIconItemShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeIconItemShimmerView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.IconImageItemTableViewCell {
  public enum Styles {
    public static let dark: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
extension YooMoneyUI.IconImageItemView {
  public enum Styles {
    public static let dark: YooMoneyUI.Style
    public static let light: YooMoneyUI.Style
    public enum IconTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
      public static let selected: YooMoneyUI.Style
    }
    public enum IconBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
    }
    public enum IconInverseBackgroundTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
    public enum IconFadeTint {
      public static let normal: YooMoneyUI.Style
      public static let highlighted: YooMoneyUI.Style
      public static let disabled: YooMoneyUI.Style
    }
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
@_Concurrency.MainActor(unsafe) final public class DotSheetTransitionController : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) final public var dismissHandler: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc final public func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UITableView {
  public enum Styles {
    public static let primary: YooMoneyUI.Style
  }
}
public enum ContextualActionStyle {
  case showMore
  case addToFavorite
  case remove
  case edit
  public static func == (a: YooMoneyUI.ContextualActionStyle, b: YooMoneyUI.ContextualActionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 11.0, *)
public enum ContextualActionFactory {
  public static func makeAction(with style: YooMoneyUI.ContextualActionStyle, handler: @escaping UIKit.UIContextualAction.Handler) -> UIKit.UIContextualAction
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LoadingCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class TourViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.TourViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) final public func setTour(_ tour: YooMoneyUI.TourViewModel)
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension YooMoneyUI.TourViewController : YooMoneyUI.TourItemViewOutput {
  @_Concurrency.MainActor(unsafe) final public func tourItemViewDidPressSubmit(_ sender: YooMoneyUI.TourItemViewInput)
}
public protocol BottomSheetTemplateDelegate : AnyObject {
  func bottomSheetTemplateDidFinish(_ template: YooMoneyUI.BottomSheetTemplate)
  func bottomSheetTemplateDidChangeSize(on size: CoreFoundation.CGSize)
  func bottomSheetTemplateChangingSize(to size: CoreFoundation.CGSize)
}
@objc @_Concurrency.MainActor(unsafe) final public class BottomSheetTemplate : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(contentViewController: UIKit.UIViewController)
  @available(*, unavailable, message: "Use init(content:) instead")
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) weak final public var delegate: YooMoneyUI.BottomSheetTemplateDelegate?
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) final public func present(on parent: UIKit.UIViewController, beforeAnimation: ((UIKit.UIView) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) final public func dismissFromParent(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension YooMoneyUI.BottomSheetTemplate : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension YooMoneyUI.BottomSheetTemplate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public class SwitchActionSheetItem : YooMoneyUI.ActionSheetItem {
  final public let title: Swift.String
  public var state: Swift.Bool
  final public let accessibilityLabel: Swift.String?
  final public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
  final public let switchStateHandler: ((Swift.Bool) -> Swift.Void)?
  final public let styles: [YooMoneyUI.Style]
  public init(title: Swift.String, state: Swift.Bool, styles: [YooMoneyUI.Style] = [UIView.Styles.defaultBackground], accessibilityLabel: Swift.String? = nil, handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)? = nil, switchStateHandler: ((Swift.Bool) -> Swift.Void)?)
  public var cellType: UIKit.UITableViewCell.Type {
    get
  }
  public func configureCell(_ cell: UIKit.UITableViewCell)
  @objc deinit
}
public struct TitleItemActionSheetItem : YooMoneyUI.ActionSheetItem {
  public let title: Swift.String
  public let isActive: Swift.Bool
  public let accessibilityLabel: Swift.String?
  public let handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)?
  public let styles: [YooMoneyUI.Style]
  public init(title: Swift.String, isActive: Swift.Bool, styles: [YooMoneyUI.Style] = [], accessibilityLabel: Swift.String? = nil, handler: ((YooMoneyUI.ActionSheetItem) -> Swift.Void)? = nil)
  public var cellType: UIKit.UITableViewCell.Type {
    get
  }
  public func configureCell(_ cell: UIKit.UITableViewCell)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StickerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var backgroundImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var textTiltAngle: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
extension YooMoneyUI.StickerView : YooMoneyUI.Sticker {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLabelHintValueItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var valueIcon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var details: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class IconLabelHintValueItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var icon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var valueIcon: UIKit.UIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var details: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var iconColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.IconLabelHintValueItemView : YooMoneyUI.IconLabelHintValueItemViewInput {
}
extension YooMoneyUI.IconLabelHintValueItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
public protocol IconLabelHintValueItemViewInput : AnyObject {
  var icon: UIKit.UIImage { get set }
  var valueIcon: UIKit.UIImage { get set }
  var title: Swift.String { get set }
  var subtitle: Swift.String { get set }
  var value: Swift.String { get set }
  var details: Swift.String { get set }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeDetailItemTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemView: YooMoneyUI.LargeDetailItemView {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class LargeDetailItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subtitle: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var value: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var subvalue: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subtitleLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var valueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var subvalueLabel: UIKit.UILabel {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LargeDetailItemView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
extension YooMoneyUI.LargeDetailItemView {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let alertSubvalue: YooMoneyUI.Style
    public static let positiveSubvalue: YooMoneyUI.Style
  }
}
extension YooMoneyUI.LargeDetailItemTableViewCell {
  public enum Styles {
    public static let `default`: YooMoneyUI.Style
    public static let alertSubvalue: YooMoneyUI.Style
    public static let positiveSubvalue: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconLabelHintValueItemTableViewCell {
  public enum Styles {
    public static let alertValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
  }
}
extension YooMoneyUI.IconLabelHintValueItemView {
  public enum Styles {
    public static let alertValue: YooMoneyUI.Style
    public static let darkValue: YooMoneyUI.Style
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ItemShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ItemShimmerView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ItemShimmerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueItemShimmerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.ValueItemShimmerView : YooMoneyUI.ListItemView {
  @_Concurrency.MainActor(unsafe) final public var leftSeparatorInset: CoreFoundation.CGFloat {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class ValueItemShimmerTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc override final public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CardTemplateTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var items: [UIKit.UIView] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var itemPressHandler: ((Swift.Int) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class GradientImageGridView : YooMoneyUI.CardTemplate {
  @_Concurrency.MainActor(unsafe) final public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var gradientColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isFramed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GradientImageGridViewCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var image: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var gradientColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isFramed: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class GradientImageGridViewShimmer : YooMoneyUI.CardTemplate {
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GradientImageGridViewShimmerCollectionViewCell : YooMoneyUI.ShimmerCollectionViewCell<YooMoneyUI.GradientImageGridViewShimmer> {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension YooMoneyUI.LocalAuthBiometryType : Swift.Equatable {}
extension YooMoneyUI.LocalAuthBiometryType : Swift.Hashable {}
extension YooMoneyUI.BiometryAuthAttemptResult : Swift.Equatable {}
extension YooMoneyUI.BiometryAuthAttemptResult : Swift.Hashable {}
extension YooMoneyUI.EasyTipView.AccessoryType : Swift.Equatable {}
extension YooMoneyUI.EasyTipView.AccessoryType : Swift.Hashable {}
extension YooMoneyUI.PasscodeStepAnimation : Swift.Equatable {}
extension YooMoneyUI.PasscodeStepAnimation : Swift.Hashable {}
extension YooMoneyUI.TextControl.BottomHintMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.BottomHintMode : Swift.Hashable {}
extension YooMoneyUI.TextControl.ClearMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.ClearMode : Swift.Hashable {}
extension YooMoneyUI.TextControl.LineMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.LineMode : Swift.Hashable {}
extension YooMoneyUI.TextControl.PlaceholderMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.PlaceholderMode : Swift.Hashable {}
extension YooMoneyUI.TextControl.RightButtonMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.RightButtonMode : Swift.Hashable {}
extension YooMoneyUI.TextControl.State : Swift.Equatable {}
extension YooMoneyUI.TextControl.State : Swift.Hashable {}
extension YooMoneyUI.TextControl.TopHintMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.TopHintMode : Swift.Hashable {}
extension YooMoneyUI.LargeTagViewModel.Style : Swift.Equatable {}
extension YooMoneyUI.LargeTagViewModel.Style : Swift.Hashable {}
extension UIKit.UIFont.Face : Swift.Equatable {}
extension UIKit.UIFont.Face : Swift.Hashable {}
extension UIKit.UIFont.Face : Swift.RawRepresentable {}
extension YooMoneyUI.WebBrowserPresenter : WebKit.WKUIDelegate {}
extension YooMoneyUI.WebBrowserPresenter : WebKit.WKNavigationDelegate {}
extension YooMoneyUI.KeyboardButtonStyle.HighlightedType : Swift.Equatable {}
extension YooMoneyUI.KeyboardButtonStyle.HighlightedType : Swift.Hashable {}
extension YooMoneyUI.PresentableNotificationStyle : Swift.Equatable {}
extension YooMoneyUI.PresentableNotificationStyle : Swift.Hashable {}
extension YooMoneyUI.PresentableNotificationType : Swift.Equatable {}
extension YooMoneyUI.PresentableNotificationType : Swift.Hashable {}
extension YooMoneyUI.EasyTipView.ArrowPosition : Swift.Equatable {}
extension YooMoneyUI.EasyTipView.ArrowPosition : Swift.Hashable {}
extension YooMoneyUI.TextControl.LeftIconMode : Swift.Equatable {}
extension YooMoneyUI.TextControl.LeftIconMode : Swift.Hashable {}
extension YooMoneyUI.ContextualActionStyle : Swift.Equatable {}
extension YooMoneyUI.ContextualActionStyle : Swift.Hashable {}
